
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000278c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000278c  00002820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800082  00800082  00002842  2**0
                  ALLOC
  3 .stab         00001e30  00000000  00000000  00002844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3c  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000053b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000054f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005660  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000072a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 10 	call	0x2140	; 0x2140 <main>
      8a:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidSetPinDirection>:

#define DIO_PORTD_REG		*((volatile u8 *) 0X32)
#define DIO_DDRD_REG		*((volatile u8 *) 0X31)
#define DIO_PIND_REG		*((volatile u8 *) 0X30)

void MDIO_voidSetPinDirection(u8 A_u8PortNo,u8 A_u8PinNo,u8 A_u8PinDirection){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
if((A_u8PortNo <= PORTD) && (A_u8PinNo <=PIN7) && (A_u8PinDirection <= OUTPUT))
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <MDIO_voidSetPinDirection+0x22>
     b66:	08 c1       	rjmp	.+528    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	88 30       	cpi	r24, 0x08	; 8
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <MDIO_voidSetPinDirection+0x2a>
     b6e:	04 c1       	rjmp	.+520    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	08 f0       	brcs	.+2      	; 0xb78 <MDIO_voidSetPinDirection+0x32>
     b76:	00 c1       	rjmp	.+512    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
{
	switch(A_u8PortNo)
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	3d 87       	std	Y+13, r19	; 0x0d
     b80:	2c 87       	std	Y+12, r18	; 0x0c
     b82:	8c 85       	ldd	r24, Y+12	; 0x0c
     b84:	9d 85       	ldd	r25, Y+13	; 0x0d
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <MDIO_voidSetPinDirection+0x48>
     b8c:	4f c0       	rjmp	.+158    	; 0xc2c <MDIO_voidSetPinDirection+0xe6>
     b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
     b90:	3d 85       	ldd	r19, Y+13	; 0x0d
     b92:	22 30       	cpi	r18, 0x02	; 2
     b94:	31 05       	cpc	r19, r1
     b96:	2c f4       	brge	.+10     	; 0xba2 <MDIO_voidSetPinDirection+0x5c>
     b98:	8c 85       	ldd	r24, Y+12	; 0x0c
     b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	71 f0       	breq	.+28     	; 0xbbc <MDIO_voidSetPinDirection+0x76>
     ba0:	eb c0       	rjmp	.+470    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
     ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	09 f4       	brne	.+2      	; 0xbae <MDIO_voidSetPinDirection+0x68>
     bac:	77 c0       	rjmp	.+238    	; 0xc9c <MDIO_voidSetPinDirection+0x156>
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	9d 85       	ldd	r25, Y+13	; 0x0d
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <MDIO_voidSetPinDirection+0x74>
     bb8:	a9 c0       	rjmp	.+338    	; 0xd0c <MDIO_voidSetPinDirection+0x1c6>
     bba:	de c0       	rjmp	.+444    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
	{
		case PORTA:
				switch(A_u8PinDirection)
     bbc:	8b 81       	ldd	r24, Y+3	; 0x03
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3b 87       	std	Y+11, r19	; 0x0b
     bc4:	2a 87       	std	Y+10, r18	; 0x0a
     bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	d1 f0       	breq	.+52     	; 0xc02 <MDIO_voidSetPinDirection+0xbc>
     bce:	2a 85       	ldd	r18, Y+10	; 0x0a
     bd0:	3b 85       	ldd	r19, Y+11	; 0x0b
     bd2:	21 30       	cpi	r18, 0x01	; 1
     bd4:	31 05       	cpc	r19, r1
     bd6:	09 f0       	breq	.+2      	; 0xbda <MDIO_voidSetPinDirection+0x94>
     bd8:	cf c0       	rjmp	.+414    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				{
				case OUTPUT: SET_BIT(DIO_DDRA_REG ,A_u8PinNo); break;
     bda:	aa e3       	ldi	r26, 0x3A	; 58
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ea e3       	ldi	r30, 0x3A	; 58
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	48 2f       	mov	r20, r24
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 2e       	mov	r0, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <MDIO_voidSetPinDirection+0xb2>
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	0a 94       	dec	r0
     bfa:	e2 f7       	brpl	.-8      	; 0xbf4 <MDIO_voidSetPinDirection+0xae>
     bfc:	84 2b       	or	r24, r20
     bfe:	8c 93       	st	X, r24
     c00:	bb c0       	rjmp	.+374    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				case INPUT:  CLR_BIT(DIO_DDRA_REG ,A_u8PinNo); break;
     c02:	aa e3       	ldi	r26, 0x3A	; 58
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	ea e3       	ldi	r30, 0x3A	; 58
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	48 2f       	mov	r20, r24
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 2e       	mov	r0, r18
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <MDIO_voidSetPinDirection+0xda>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <MDIO_voidSetPinDirection+0xd6>
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	a6 c0       	rjmp	.+332    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				}
			break;
		case PORTB:
				switch(A_u8PinDirection)
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	39 87       	std	Y+9, r19	; 0x09
     c34:	28 87       	std	Y+8, r18	; 0x08
     c36:	88 85       	ldd	r24, Y+8	; 0x08
     c38:	99 85       	ldd	r25, Y+9	; 0x09
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	d1 f0       	breq	.+52     	; 0xc72 <MDIO_voidSetPinDirection+0x12c>
     c3e:	28 85       	ldd	r18, Y+8	; 0x08
     c40:	39 85       	ldd	r19, Y+9	; 0x09
     c42:	21 30       	cpi	r18, 0x01	; 1
     c44:	31 05       	cpc	r19, r1
     c46:	09 f0       	breq	.+2      	; 0xc4a <MDIO_voidSetPinDirection+0x104>
     c48:	97 c0       	rjmp	.+302    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				{
				case OUTPUT: SET_BIT(DIO_DDRB_REG ,A_u8PinNo); break;
     c4a:	a7 e3       	ldi	r26, 0x37	; 55
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e7 e3       	ldi	r30, 0x37	; 55
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <MDIO_voidSetPinDirection+0x122>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <MDIO_voidSetPinDirection+0x11e>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	83 c0       	rjmp	.+262    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				case INPUT:  CLR_BIT(DIO_DDRB_REG ,A_u8PinNo); break;
     c72:	a7 e3       	ldi	r26, 0x37	; 55
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e7 e3       	ldi	r30, 0x37	; 55
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	48 2f       	mov	r20, r24
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <MDIO_voidSetPinDirection+0x14a>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <MDIO_voidSetPinDirection+0x146>
     c94:	80 95       	com	r24
     c96:	84 23       	and	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	6e c0       	rjmp	.+220    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				}
			break;
		case PORTC:
				switch(A_u8PinDirection)
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3f 83       	std	Y+7, r19	; 0x07
     ca4:	2e 83       	std	Y+6, r18	; 0x06
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	d1 f0       	breq	.+52     	; 0xce2 <MDIO_voidSetPinDirection+0x19c>
     cae:	2e 81       	ldd	r18, Y+6	; 0x06
     cb0:	3f 81       	ldd	r19, Y+7	; 0x07
     cb2:	21 30       	cpi	r18, 0x01	; 1
     cb4:	31 05       	cpc	r19, r1
     cb6:	09 f0       	breq	.+2      	; 0xcba <MDIO_voidSetPinDirection+0x174>
     cb8:	5f c0       	rjmp	.+190    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				{
				case OUTPUT: SET_BIT(DIO_DDRC_REG ,A_u8PinNo); break;
     cba:	a4 e3       	ldi	r26, 0x34	; 52
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <MDIO_voidSetPinDirection+0x192>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <MDIO_voidSetPinDirection+0x18e>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	4b c0       	rjmp	.+150    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				case INPUT:  CLR_BIT(DIO_DDRC_REG ,A_u8PinNo); break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <MDIO_voidSetPinDirection+0x1ba>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <MDIO_voidSetPinDirection+0x1b6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	36 c0       	rjmp	.+108    	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				}
			break;
		case PORTD:
				switch(A_u8PinDirection)
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3d 83       	std	Y+5, r19	; 0x05
     d14:	2c 83       	std	Y+4, r18	; 0x04
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	c9 f0       	breq	.+50     	; 0xd50 <MDIO_voidSetPinDirection+0x20a>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	21 30       	cpi	r18, 0x01	; 1
     d24:	31 05       	cpc	r19, r1
     d26:	41 f5       	brne	.+80     	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				{
				case OUTPUT: SET_BIT(DIO_DDRD_REG ,A_u8PinNo); break;
     d28:	a1 e3       	ldi	r26, 0x31	; 49
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e1 e3       	ldi	r30, 0x31	; 49
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <MDIO_voidSetPinDirection+0x200>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <MDIO_voidSetPinDirection+0x1fc>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <MDIO_voidSetPinDirection+0x232>
				case INPUT:  CLR_BIT(DIO_DDRD_REG ,A_u8PinNo); break;
     d50:	a1 e3       	ldi	r26, 0x31	; 49
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e1 e3       	ldi	r30, 0x31	; 49
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <MDIO_voidSetPinDirection+0x228>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <MDIO_voidSetPinDirection+0x224>
     d72:	80 95       	com	r24
     d74:	84 23       	and	r24, r20
     d76:	8c 93       	st	X, r24
				}
			break;
	}		/*endif*/ }


}
     d78:	2d 96       	adiw	r28, 0x0d	; 13
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8PortNo,u8 A_u8PinNo,u8 A_u8PinValue){
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	2d 97       	sbiw	r28, 0x0d	; 13
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	6a 83       	std	Y+2, r22	; 0x02
     da2:	4b 83       	std	Y+3, r20	; 0x03
	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) && (A_u8PinValue <=HIGH)){
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	08 f0       	brcs	.+2      	; 0xdac <MDIO_voidSetPinValue+0x22>
     daa:	08 c1       	rjmp	.+528    	; 0xfbc <MDIO_voidSetPinValue+0x232>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	88 30       	cpi	r24, 0x08	; 8
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <MDIO_voidSetPinValue+0x2a>
     db2:	04 c1       	rjmp	.+520    	; 0xfbc <MDIO_voidSetPinValue+0x232>
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f0       	brcs	.+2      	; 0xdbc <MDIO_voidSetPinValue+0x32>
     dba:	00 c1       	rjmp	.+512    	; 0xfbc <MDIO_voidSetPinValue+0x232>
	switch(A_u8PortNo)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3d 87       	std	Y+13, r19	; 0x0d
     dc4:	2c 87       	std	Y+12, r18	; 0x0c
     dc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <MDIO_voidSetPinValue+0x48>
     dd0:	4f c0       	rjmp	.+158    	; 0xe70 <MDIO_voidSetPinValue+0xe6>
     dd2:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd4:	3d 85       	ldd	r19, Y+13	; 0x0d
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <MDIO_voidSetPinValue+0x5c>
     ddc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dde:	9d 85       	ldd	r25, Y+13	; 0x0d
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	71 f0       	breq	.+28     	; 0xe00 <MDIO_voidSetPinValue+0x76>
     de4:	eb c0       	rjmp	.+470    	; 0xfbc <MDIO_voidSetPinValue+0x232>
     de6:	2c 85       	ldd	r18, Y+12	; 0x0c
     de8:	3d 85       	ldd	r19, Y+13	; 0x0d
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	09 f4       	brne	.+2      	; 0xdf2 <MDIO_voidSetPinValue+0x68>
     df0:	77 c0       	rjmp	.+238    	; 0xee0 <MDIO_voidSetPinValue+0x156>
     df2:	8c 85       	ldd	r24, Y+12	; 0x0c
     df4:	9d 85       	ldd	r25, Y+13	; 0x0d
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <MDIO_voidSetPinValue+0x74>
     dfc:	a9 c0       	rjmp	.+338    	; 0xf50 <MDIO_voidSetPinValue+0x1c6>
     dfe:	de c0       	rjmp	.+444    	; 0xfbc <MDIO_voidSetPinValue+0x232>
		{
			case PORTA:
					switch(A_u8PinValue)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3b 87       	std	Y+11, r19	; 0x0b
     e08:	2a 87       	std	Y+10, r18	; 0x0a
     e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	d1 f0       	breq	.+52     	; 0xe46 <MDIO_voidSetPinValue+0xbc>
     e12:	2a 85       	ldd	r18, Y+10	; 0x0a
     e14:	3b 85       	ldd	r19, Y+11	; 0x0b
     e16:	21 30       	cpi	r18, 0x01	; 1
     e18:	31 05       	cpc	r19, r1
     e1a:	09 f0       	breq	.+2      	; 0xe1e <MDIO_voidSetPinValue+0x94>
     e1c:	cf c0       	rjmp	.+414    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					{
					case OUTPUT: SET_BIT(DIO_PORTA_REG ,A_u8PinNo); break;
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <MDIO_voidSetPinValue+0xb2>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <MDIO_voidSetPinValue+0xae>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	bb c0       	rjmp	.+374    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					case INPUT:  CLR_BIT(DIO_PORTA_REG ,A_u8PinNo); break;
     e46:	ab e3       	ldi	r26, 0x3B	; 59
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	eb e3       	ldi	r30, 0x3B	; 59
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <MDIO_voidSetPinValue+0xda>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <MDIO_voidSetPinValue+0xd6>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	a6 c0       	rjmp	.+332    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					}
					break;
			case PORTB:
					switch(A_u8PinValue)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	39 87       	std	Y+9, r19	; 0x09
     e78:	28 87       	std	Y+8, r18	; 0x08
     e7a:	88 85       	ldd	r24, Y+8	; 0x08
     e7c:	99 85       	ldd	r25, Y+9	; 0x09
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	d1 f0       	breq	.+52     	; 0xeb6 <MDIO_voidSetPinValue+0x12c>
     e82:	28 85       	ldd	r18, Y+8	; 0x08
     e84:	39 85       	ldd	r19, Y+9	; 0x09
     e86:	21 30       	cpi	r18, 0x01	; 1
     e88:	31 05       	cpc	r19, r1
     e8a:	09 f0       	breq	.+2      	; 0xe8e <MDIO_voidSetPinValue+0x104>
     e8c:	97 c0       	rjmp	.+302    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					{
					case OUTPUT: SET_BIT(DIO_PORTB_REG ,A_u8PinNo); break;
     e8e:	a8 e3       	ldi	r26, 0x38	; 56
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <MDIO_voidSetPinValue+0x122>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <MDIO_voidSetPinValue+0x11e>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	83 c0       	rjmp	.+262    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					case INPUT:  CLR_BIT(DIO_PORTB_REG ,A_u8PinNo); break;
     eb6:	a8 e3       	ldi	r26, 0x38	; 56
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e8 e3       	ldi	r30, 0x38	; 56
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <MDIO_voidSetPinValue+0x14a>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <MDIO_voidSetPinValue+0x146>
     ed8:	80 95       	com	r24
     eda:	84 23       	and	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	6e c0       	rjmp	.+220    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					}
					break;
			case PORTC:
					switch(A_u8PinValue)
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3f 83       	std	Y+7, r19	; 0x07
     ee8:	2e 83       	std	Y+6, r18	; 0x06
     eea:	8e 81       	ldd	r24, Y+6	; 0x06
     eec:	9f 81       	ldd	r25, Y+7	; 0x07
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	d1 f0       	breq	.+52     	; 0xf26 <MDIO_voidSetPinValue+0x19c>
     ef2:	2e 81       	ldd	r18, Y+6	; 0x06
     ef4:	3f 81       	ldd	r19, Y+7	; 0x07
     ef6:	21 30       	cpi	r18, 0x01	; 1
     ef8:	31 05       	cpc	r19, r1
     efa:	09 f0       	breq	.+2      	; 0xefe <MDIO_voidSetPinValue+0x174>
     efc:	5f c0       	rjmp	.+190    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					{
					case OUTPUT: SET_BIT(DIO_PORTC_REG ,A_u8PinNo); break;
     efe:	a5 e3       	ldi	r26, 0x35	; 53
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e3       	ldi	r30, 0x35	; 53
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <MDIO_voidSetPinValue+0x192>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <MDIO_voidSetPinValue+0x18e>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	4b c0       	rjmp	.+150    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					case INPUT:  CLR_BIT(DIO_PORTC_REG ,A_u8PinNo); break;
     f26:	a5 e3       	ldi	r26, 0x35	; 53
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <MDIO_voidSetPinValue+0x1ba>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <MDIO_voidSetPinValue+0x1b6>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	36 c0       	rjmp	.+108    	; 0xfbc <MDIO_voidSetPinValue+0x232>
					}
					break;
			case PORTD:
					switch(A_u8PinValue)
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3d 83       	std	Y+5, r19	; 0x05
     f58:	2c 83       	std	Y+4, r18	; 0x04
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	c9 f0       	breq	.+50     	; 0xf94 <MDIO_voidSetPinValue+0x20a>
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	31 05       	cpc	r19, r1
     f6a:	41 f5       	brne	.+80     	; 0xfbc <MDIO_voidSetPinValue+0x232>
					{
					case OUTPUT: SET_BIT(DIO_PORTD_REG ,A_u8PinNo); break;
     f6c:	a2 e3       	ldi	r26, 0x32	; 50
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e2 e3       	ldi	r30, 0x32	; 50
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <MDIO_voidSetPinValue+0x200>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <MDIO_voidSetPinValue+0x1fc>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <MDIO_voidSetPinValue+0x232>
					case INPUT:  CLR_BIT(DIO_PORTD_REG ,A_u8PinNo); break;
     f94:	a2 e3       	ldi	r26, 0x32	; 50
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e2 e3       	ldi	r30, 0x32	; 50
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <MDIO_voidSetPinValue+0x228>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <MDIO_voidSetPinValue+0x224>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
					}
					break;
		}		/*endif*/}
}
     fbc:	2d 96       	adiw	r28, 0x0d	; 13
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <MDIO_U8GetPinValue>:

u8 MDIO_U8GetPinValue(u8 A_u8PortNo,u8 A_u8PinNo){
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <MDIO_U8GetPinValue+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <MDIO_U8GetPinValue+0x8>
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	6b 83       	std	Y+3, r22	; 0x03

	u8 local_u8PinValue=3;
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	89 83       	std	Y+1, r24	; 0x01

	if ( (A_u8PortNo<=PORTD) && (A_u8PinNo<=PIN7) ){
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	08 f0       	brcs	.+2      	; 0xfec <MDIO_U8GetPinValue+0x1e>
     fea:	6b c0       	rjmp	.+214    	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 30       	cpi	r24, 0x08	; 8
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <MDIO_U8GetPinValue+0x26>
     ff2:	67 c0       	rjmp	.+206    	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
	switch(A_u8PortNo)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3d 83       	std	Y+5, r19	; 0x05
     ffc:	2c 83       	std	Y+4, r18	; 0x04
     ffe:	4c 81       	ldd	r20, Y+4	; 0x04
    1000:	5d 81       	ldd	r21, Y+5	; 0x05
    1002:	41 30       	cpi	r20, 0x01	; 1
    1004:	51 05       	cpc	r21, r1
    1006:	41 f1       	breq	.+80     	; 0x1058 <MDIO_U8GetPinValue+0x8a>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	91 05       	cpc	r25, r1
    1010:	34 f4       	brge	.+12     	; 0x101e <MDIO_U8GetPinValue+0x50>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	61 f0       	breq	.+24     	; 0x1034 <MDIO_U8GetPinValue+0x66>
    101c:	52 c0       	rjmp	.+164    	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
    101e:	4c 81       	ldd	r20, Y+4	; 0x04
    1020:	5d 81       	ldd	r21, Y+5	; 0x05
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	51 05       	cpc	r21, r1
    1026:	51 f1       	breq	.+84     	; 0x107c <MDIO_U8GetPinValue+0xae>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 05       	cpc	r25, r1
    1030:	b9 f1       	breq	.+110    	; 0x10a0 <MDIO_U8GetPinValue+0xd2>
    1032:	47 c0       	rjmp	.+142    	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
	{
	case PORTA: local_u8PinValue = GET_BIT(DIO_PINA_REG ,A_u8PinNo); break;
    1034:	e9 e3       	ldi	r30, 0x39	; 57
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <MDIO_U8GetPinValue+0x7e>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <MDIO_U8GetPinValue+0x7a>
    1050:	ca 01       	movw	r24, r20
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	35 c0       	rjmp	.+106    	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
	case PORTB: local_u8PinValue = GET_BIT(DIO_PINB_REG ,A_u8PinNo); break;
    1058:	e6 e3       	ldi	r30, 0x36	; 54
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <MDIO_U8GetPinValue+0xa2>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <MDIO_U8GetPinValue+0x9e>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	23 c0       	rjmp	.+70     	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
	case PORTC: local_u8PinValue = GET_BIT(DIO_PINC_REG ,A_u8PinNo); break;
    107c:	e3 e3       	ldi	r30, 0x33	; 51
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <MDIO_U8GetPinValue+0xc6>
    1090:	55 95       	asr	r21
    1092:	47 95       	ror	r20
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <MDIO_U8GetPinValue+0xc2>
    1098:	ca 01       	movw	r24, r20
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	11 c0       	rjmp	.+34     	; 0x10c2 <MDIO_U8GetPinValue+0xf4>
	case PORTD: local_u8PinValue = GET_BIT(DIO_PIND_REG ,A_u8PinNo); break;
    10a0:	e0 e3       	ldi	r30, 0x30	; 48
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <MDIO_U8GetPinValue+0xea>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <MDIO_U8GetPinValue+0xe6>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	89 83       	std	Y+1, r24	; 0x01
	} /* endif */}
	return local_u8PinValue;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8PortNo,u8 A_u8PortDirection){
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <MDIO_voidSetPortDirection+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <MDIO_voidSetPortDirection+0x8>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
	if ( (A_u8PortNo<=PORTD) ){
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	90 f5       	brcc	.+100    	; 0x114e <MDIO_voidSetPortDirection+0x7a>
	switch(A_u8PortNo)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3c 83       	std	Y+4, r19	; 0x04
    10f2:	2b 83       	std	Y+3, r18	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	d1 f0       	breq	.+52     	; 0x1132 <MDIO_voidSetPortDirection+0x5e>
    10fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1100:	3c 81       	ldd	r19, Y+4	; 0x04
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	2c f4       	brge	.+10     	; 0x1112 <MDIO_voidSetPortDirection+0x3e>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 f0       	breq	.+24     	; 0x1128 <MDIO_voidSetPortDirection+0x54>
    1110:	1e c0       	rjmp	.+60     	; 0x114e <MDIO_voidSetPortDirection+0x7a>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	81 f0       	breq	.+32     	; 0x113c <MDIO_voidSetPortDirection+0x68>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	81 f0       	breq	.+32     	; 0x1146 <MDIO_voidSetPortDirection+0x72>
    1126:	13 c0       	rjmp	.+38     	; 0x114e <MDIO_voidSetPortDirection+0x7a>
		{
		case PORTA: DIO_DDRA_REG= A_u8PortDirection; break;
    1128:	ea e3       	ldi	r30, 0x3A	; 58
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	0e c0       	rjmp	.+28     	; 0x114e <MDIO_voidSetPortDirection+0x7a>
		case PORTB: DIO_DDRB_REG= A_u8PortDirection; break;
    1132:	e7 e3       	ldi	r30, 0x37	; 55
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
    113a:	09 c0       	rjmp	.+18     	; 0x114e <MDIO_voidSetPortDirection+0x7a>
		case PORTC: DIO_DDRC_REG= A_u8PortDirection; break;
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	04 c0       	rjmp	.+8      	; 0x114e <MDIO_voidSetPortDirection+0x7a>
		case PORTD: DIO_DDRD_REG= A_u8PortDirection; break;
    1146:	e1 e3       	ldi	r30, 0x31	; 49
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
		 }   }
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(u8 A_u8PortNo,u8 A_u8PortValue){
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <MDIO_voidSetPortValue+0x6>
    1162:	00 d0       	rcall	.+0      	; 0x1164 <MDIO_voidSetPortValue+0x8>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	6a 83       	std	Y+2, r22	; 0x02

	if ( (A_u8PortNo<=PORTD) ){
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	90 f5       	brcc	.+100    	; 0x11d6 <MDIO_voidSetPortValue+0x7a>
	switch(A_u8PortNo)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 83       	std	Y+4, r19	; 0x04
    117a:	2b 83       	std	Y+3, r18	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	d1 f0       	breq	.+52     	; 0x11ba <MDIO_voidSetPortValue+0x5e>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	2c f4       	brge	.+10     	; 0x119a <MDIO_voidSetPortValue+0x3e>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	61 f0       	breq	.+24     	; 0x11b0 <MDIO_voidSetPortValue+0x54>
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <MDIO_voidSetPortValue+0x7a>
    119a:	2b 81       	ldd	r18, Y+3	; 0x03
    119c:	3c 81       	ldd	r19, Y+4	; 0x04
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	81 f0       	breq	.+32     	; 0x11c4 <MDIO_voidSetPortValue+0x68>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	91 05       	cpc	r25, r1
    11ac:	81 f0       	breq	.+32     	; 0x11ce <MDIO_voidSetPortValue+0x72>
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <MDIO_voidSetPortValue+0x7a>
			{
			case PORTA: DIO_PORTA_REG= A_u8PortValue; break;
    11b0:	eb e3       	ldi	r30, 0x3B	; 59
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	80 83       	st	Z, r24
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <MDIO_voidSetPortValue+0x7a>
			case PORTB: DIO_PORTB_REG= A_u8PortValue; break;
    11ba:	e8 e3       	ldi	r30, 0x38	; 56
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <MDIO_voidSetPortValue+0x7a>
			case PORTC: DIO_PORTC_REG= A_u8PortValue; break;
    11c4:	e5 e3       	ldi	r30, 0x35	; 53
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <MDIO_voidSetPortValue+0x7a>
			case PORTD: DIO_PORTD_REG= A_u8PortValue; break;
    11ce:	e2 e3       	ldi	r30, 0x32	; 50
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
			}		}
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <HLCD_voidSendCommand>:
#include <util/delay.h>
#include "../LCD/LCD_int.h"


void HLCD_voidSendCommand(u8 A_u8cmd)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	6d 97       	sbiw	r28, 0x1d	; 29
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	8d 8f       	std	Y+29, r24	; 0x1d
	//control RS and RW pins
	MDIO_voidSetPinDirection(Control_Port,PIN0,OUTPUT);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	41 e0       	ldi	r20, 0x01	; 1
    1200:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(Control_Port,PIN1,OUTPUT);
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidSetPinDirection>

		MDIO_voidSetPinValue(Control_Port,PIN0,LOW);
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>

		//write data on data_port
		MDIO_voidSetPortDirection(Data_Port,OUTPUT);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidSetPortDirection>
		MDIO_voidSetPortValue(Data_Port,A_u8cmd);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    122e:	0e 94 ae 08 	call	0x115c	; 0x115c <MDIO_voidSetPortValue>

		//Enable pin
		MDIO_voidSetPinDirection(Control_Port,PIN2,OUTPUT);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	62 e0       	ldi	r22, 0x02	; 2
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidSetPinDirection>

		MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a0 e8       	ldi	r26, 0x80	; 128
    124c:	bf e3       	ldi	r27, 0x3F	; 63
    124e:	89 8f       	std	Y+25, r24	; 0x19
    1250:	9a 8f       	std	Y+26, r25	; 0x1a
    1252:	ab 8f       	std	Y+27, r26	; 0x1b
    1254:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1256:	69 8d       	ldd	r22, Y+25	; 0x19
    1258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	4a ef       	ldi	r20, 0xFA	; 250
    1264:	54 e4       	ldi	r21, 0x44	; 68
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	8d 8b       	std	Y+21, r24	; 0x15
    1270:	9e 8b       	std	Y+22, r25	; 0x16
    1272:	af 8b       	std	Y+23, r26	; 0x17
    1274:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1276:	6d 89       	ldd	r22, Y+21	; 0x15
    1278:	7e 89       	ldd	r23, Y+22	; 0x16
    127a:	8f 89       	ldd	r24, Y+23	; 0x17
    127c:	98 8d       	ldd	r25, Y+24	; 0x18
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e8       	ldi	r20, 0x80	; 128
    1284:	5f e3       	ldi	r21, 0x3F	; 63
    1286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128a:	88 23       	and	r24, r24
    128c:	2c f4       	brge	.+10     	; 0x1298 <HLCD_voidSendCommand+0xb4>
		__ticks = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	3f c0       	rjmp	.+126    	; 0x1316 <HLCD_voidSendCommand+0x132>
	else if (__tmp > 65535)
    1298:	6d 89       	ldd	r22, Y+21	; 0x15
    129a:	7e 89       	ldd	r23, Y+22	; 0x16
    129c:	8f 89       	ldd	r24, Y+23	; 0x17
    129e:	98 8d       	ldd	r25, Y+24	; 0x18
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	3f ef       	ldi	r19, 0xFF	; 255
    12a4:	4f e7       	ldi	r20, 0x7F	; 127
    12a6:	57 e4       	ldi	r21, 0x47	; 71
    12a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ac:	18 16       	cp	r1, r24
    12ae:	4c f5       	brge	.+82     	; 0x1302 <HLCD_voidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b0:	69 8d       	ldd	r22, Y+25	; 0x19
    12b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e2       	ldi	r20, 0x20	; 32
    12be:	51 e4       	ldi	r21, 0x41	; 65
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	9c 8b       	std	Y+20, r25	; 0x14
    12d6:	8b 8b       	std	Y+19, r24	; 0x13
    12d8:	0f c0       	rjmp	.+30     	; 0x12f8 <HLCD_voidSendCommand+0x114>
    12da:	88 ec       	ldi	r24, 0xC8	; 200
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9a 8b       	std	Y+18, r25	; 0x12
    12e0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12e2:	89 89       	ldd	r24, Y+17	; 0x11
    12e4:	9a 89       	ldd	r25, Y+18	; 0x12
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <HLCD_voidSendCommand+0x102>
    12ea:	9a 8b       	std	Y+18, r25	; 0x12
    12ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	9c 8b       	std	Y+20, r25	; 0x14
    12f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	69 f7       	brne	.-38     	; 0x12da <HLCD_voidSendCommand+0xf6>
    1300:	14 c0       	rjmp	.+40     	; 0x132a <HLCD_voidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1302:	6d 89       	ldd	r22, Y+21	; 0x15
    1304:	7e 89       	ldd	r23, Y+22	; 0x16
    1306:	8f 89       	ldd	r24, Y+23	; 0x17
    1308:	98 8d       	ldd	r25, Y+24	; 0x18
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9c 8b       	std	Y+20, r25	; 0x14
    1314:	8b 8b       	std	Y+19, r24	; 0x13
    1316:	8b 89       	ldd	r24, Y+19	; 0x13
    1318:	9c 89       	ldd	r25, Y+20	; 0x14
    131a:	98 8b       	std	Y+16, r25	; 0x10
    131c:	8f 87       	std	Y+15, r24	; 0x0f
    131e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1320:	98 89       	ldd	r25, Y+16	; 0x10
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <HLCD_voidSendCommand+0x13e>
    1326:	98 8b       	std	Y+16, r25	; 0x10
    1328:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	62 e0       	ldi	r22, 0x02	; 2
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a0 e8       	ldi	r26, 0x80	; 128
    133a:	bf e3       	ldi	r27, 0x3F	; 63
    133c:	8b 87       	std	Y+11, r24	; 0x0b
    133e:	9c 87       	std	Y+12, r25	; 0x0c
    1340:	ad 87       	std	Y+13, r26	; 0x0d
    1342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1344:	6b 85       	ldd	r22, Y+11	; 0x0b
    1346:	7c 85       	ldd	r23, Y+12	; 0x0c
    1348:	8d 85       	ldd	r24, Y+13	; 0x0d
    134a:	9e 85       	ldd	r25, Y+14	; 0x0e
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	4a ef       	ldi	r20, 0xFA	; 250
    1352:	54 e4       	ldi	r21, 0x44	; 68
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	8f 83       	std	Y+7, r24	; 0x07
    135e:	98 87       	std	Y+8, r25	; 0x08
    1360:	a9 87       	std	Y+9, r26	; 0x09
    1362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	2c f4       	brge	.+10     	; 0x1386 <HLCD_voidSendCommand+0x1a2>
		__ticks = 1;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	3f c0       	rjmp	.+126    	; 0x1404 <HLCD_voidSendCommand+0x220>
	else if (__tmp > 65535)
    1386:	6f 81       	ldd	r22, Y+7	; 0x07
    1388:	78 85       	ldd	r23, Y+8	; 0x08
    138a:	89 85       	ldd	r24, Y+9	; 0x09
    138c:	9a 85       	ldd	r25, Y+10	; 0x0a
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	3f ef       	ldi	r19, 0xFF	; 255
    1392:	4f e7       	ldi	r20, 0x7F	; 127
    1394:	57 e4       	ldi	r21, 0x47	; 71
    1396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139a:	18 16       	cp	r1, r24
    139c:	4c f5       	brge	.+82     	; 0x13f0 <HLCD_voidSendCommand+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139e:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e2       	ldi	r20, 0x20	; 32
    13ac:	51 e4       	ldi	r21, 0x41	; 65
    13ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	cd 01       	movw	r24, r26
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <HLCD_voidSendCommand+0x202>
    13c8:	88 ec       	ldi	r24, 0xC8	; 200
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <HLCD_voidSendCommand+0x1f0>
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	69 f7       	brne	.-38     	; 0x13c8 <HLCD_voidSendCommand+0x1e4>
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <HLCD_voidSendCommand+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	9a 83       	std	Y+2, r25	; 0x02
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <HLCD_voidSendCommand+0x22c>
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    1418:	6d 96       	adiw	r28, 0x1d	; 29
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <HLCD_voidSendData>:


void HLCD_voidSendData(u8 A_u8Data)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	6d 97       	sbiw	r28, 0x1d	; 29
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	8d 8f       	std	Y+29, r24	; 0x1d

	MDIO_voidSetPinDirection(Control_Port,PIN0,OUTPUT);
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidSetPinDirection>
		MDIO_voidSetPinDirection(Control_Port,PIN1,OUTPUT);
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidSetPinDirection>

		MDIO_voidSetPinValue(Control_Port,PIN0,HIGH);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(Control_Port,PIN1,LOW);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>

		//write data on data_port
		MDIO_voidSetPortDirection(Data_Port,OUTPUT);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidSetPortDirection>
		MDIO_voidSetPortValue(Data_Port,A_u8Data);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1474:	0e 94 ae 08 	call	0x115c	; 0x115c <MDIO_voidSetPortValue>

		//Enable pin
		MDIO_voidSetPinDirection(Control_Port,PIN2,OUTPUT);
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	62 e0       	ldi	r22, 0x02	; 2
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidSetPinDirection>

		MDIO_voidSetPinValue(Control_Port,PIN2,HIGH);
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a0 e8       	ldi	r26, 0x80	; 128
    1492:	bf e3       	ldi	r27, 0x3F	; 63
    1494:	89 8f       	std	Y+25, r24	; 0x19
    1496:	9a 8f       	std	Y+26, r25	; 0x1a
    1498:	ab 8f       	std	Y+27, r26	; 0x1b
    149a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149c:	69 8d       	ldd	r22, Y+25	; 0x19
    149e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8d 8b       	std	Y+21, r24	; 0x15
    14b6:	9e 8b       	std	Y+22, r25	; 0x16
    14b8:	af 8b       	std	Y+23, r26	; 0x17
    14ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14bc:	6d 89       	ldd	r22, Y+21	; 0x15
    14be:	7e 89       	ldd	r23, Y+22	; 0x16
    14c0:	8f 89       	ldd	r24, Y+23	; 0x17
    14c2:	98 8d       	ldd	r25, Y+24	; 0x18
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	2c f4       	brge	.+10     	; 0x14de <HLCD_voidSendData+0xb4>
		__ticks = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9c 8b       	std	Y+20, r25	; 0x14
    14da:	8b 8b       	std	Y+19, r24	; 0x13
    14dc:	3f c0       	rjmp	.+126    	; 0x155c <HLCD_voidSendData+0x132>
	else if (__tmp > 65535)
    14de:	6d 89       	ldd	r22, Y+21	; 0x15
    14e0:	7e 89       	ldd	r23, Y+22	; 0x16
    14e2:	8f 89       	ldd	r24, Y+23	; 0x17
    14e4:	98 8d       	ldd	r25, Y+24	; 0x18
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	4f e7       	ldi	r20, 0x7F	; 127
    14ec:	57 e4       	ldi	r21, 0x47	; 71
    14ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f2:	18 16       	cp	r1, r24
    14f4:	4c f5       	brge	.+82     	; 0x1548 <HLCD_voidSendData+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f6:	69 8d       	ldd	r22, Y+25	; 0x19
    14f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 e4       	ldi	r21, 0x41	; 65
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
    151e:	0f c0       	rjmp	.+30     	; 0x153e <HLCD_voidSendData+0x114>
    1520:	88 ec       	ldi	r24, 0xC8	; 200
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9a 8b       	std	Y+18, r25	; 0x12
    1526:	89 8b       	std	Y+17, r24	; 0x11
    1528:	89 89       	ldd	r24, Y+17	; 0x11
    152a:	9a 89       	ldd	r25, Y+18	; 0x12
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <HLCD_voidSendData+0x102>
    1530:	9a 8b       	std	Y+18, r25	; 0x12
    1532:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1534:	8b 89       	ldd	r24, Y+19	; 0x13
    1536:	9c 89       	ldd	r25, Y+20	; 0x14
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9c 8b       	std	Y+20, r25	; 0x14
    153c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	8b 89       	ldd	r24, Y+19	; 0x13
    1540:	9c 89       	ldd	r25, Y+20	; 0x14
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	69 f7       	brne	.-38     	; 0x1520 <HLCD_voidSendData+0xf6>
    1546:	14 c0       	rjmp	.+40     	; 0x1570 <HLCD_voidSendData+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1548:	6d 89       	ldd	r22, Y+21	; 0x15
    154a:	7e 89       	ldd	r23, Y+22	; 0x16
    154c:	8f 89       	ldd	r24, Y+23	; 0x17
    154e:	98 8d       	ldd	r25, Y+24	; 0x18
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
    155c:	8b 89       	ldd	r24, Y+19	; 0x13
    155e:	9c 89       	ldd	r25, Y+20	; 0x14
    1560:	98 8b       	std	Y+16, r25	; 0x10
    1562:	8f 87       	std	Y+15, r24	; 0x0f
    1564:	8f 85       	ldd	r24, Y+15	; 0x0f
    1566:	98 89       	ldd	r25, Y+16	; 0x10
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <HLCD_voidSendData+0x13e>
    156c:	98 8b       	std	Y+16, r25	; 0x10
    156e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		MDIO_voidSetPinValue(Control_Port,PIN2,LOW);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	8b 87       	std	Y+11, r24	; 0x0b
    1584:	9c 87       	std	Y+12, r25	; 0x0c
    1586:	ad 87       	std	Y+13, r26	; 0x0d
    1588:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	6b 85       	ldd	r22, Y+11	; 0x0b
    158c:	7c 85       	ldd	r23, Y+12	; 0x0c
    158e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1590:	9e 85       	ldd	r25, Y+14	; 0x0e
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a ef       	ldi	r20, 0xFA	; 250
    1598:	54 e4       	ldi	r21, 0x44	; 68
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8f 83       	std	Y+7, r24	; 0x07
    15a4:	98 87       	std	Y+8, r25	; 0x08
    15a6:	a9 87       	std	Y+9, r26	; 0x09
    15a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <HLCD_voidSendData+0x1a2>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <HLCD_voidSendData+0x220>
	else if (__tmp > 65535)
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <HLCD_voidSendData+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	0f c0       	rjmp	.+30     	; 0x162c <HLCD_voidSendData+0x202>
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <HLCD_voidSendData+0x1f0>
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f7       	brne	.-38     	; 0x160e <HLCD_voidSendData+0x1e4>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <HLCD_voidSendData+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9e 83       	std	Y+6, r25	; 0x06
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	9a 83       	std	Y+2, r25	; 0x02
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	9a 81       	ldd	r25, Y+2	; 0x02
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <HLCD_voidSendData+0x22c>
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
}
    165e:	6d 96       	adiw	r28, 0x1d	; 29
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <HLCD_voidInt>:


void HLCD_voidInt()
{
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	c6 54       	subi	r28, 0x46	; 70
    167e:	d0 40       	sbci	r29, 0x00	; 0
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	fe 01       	movw	r30, r28
    168c:	ed 5b       	subi	r30, 0xBD	; 189
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 ef       	ldi	r26, 0xF0	; 240
    1696:	b1 e4       	ldi	r27, 0x41	; 65
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	01 5c       	subi	r16, 0xC1	; 193
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	ed 5b       	subi	r30, 0xBD	; 189
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	ff 96       	adiw	r30, 0x3f	; 63
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <HLCD_voidInt+0x84>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
    16f2:	46 c0       	rjmp	.+140    	; 0x1780 <HLCD_voidInt+0x110>
	else if (__tmp > 65535)
    16f4:	fe 01       	movw	r30, r28
    16f6:	ff 96       	adiw	r30, 0x3f	; 63
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	57 e4       	ldi	r21, 0x47	; 71
    1708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170c:	18 16       	cp	r1, r24
    170e:	64 f5       	brge	.+88     	; 0x1768 <HLCD_voidInt+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	fe 01       	movw	r30, r28
    1712:	ed 5b       	subi	r30, 0xBD	; 189
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e af       	std	Y+62, r25	; 0x3e
    173c:	8d af       	std	Y+61, r24	; 0x3d
    173e:	0f c0       	rjmp	.+30     	; 0x175e <HLCD_voidInt+0xee>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c af       	std	Y+60, r25	; 0x3c
    1746:	8b af       	std	Y+59, r24	; 0x3b
    1748:	8b ad       	ldd	r24, Y+59	; 0x3b
    174a:	9c ad       	ldd	r25, Y+60	; 0x3c
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <HLCD_voidInt+0xdc>
    1750:	9c af       	std	Y+60, r25	; 0x3c
    1752:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d ad       	ldd	r24, Y+61	; 0x3d
    1756:	9e ad       	ldd	r25, Y+62	; 0x3e
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e af       	std	Y+62, r25	; 0x3e
    175c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1760:	9e ad       	ldd	r25, Y+62	; 0x3e
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <HLCD_voidInt+0xd0>
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <HLCD_voidInt+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	fe 01       	movw	r30, r28
    176a:	ff 96       	adiw	r30, 0x3f	; 63
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e af       	std	Y+62, r25	; 0x3e
    177e:	8d af       	std	Y+61, r24	; 0x3d
    1780:	8d ad       	ldd	r24, Y+61	; 0x3d
    1782:	9e ad       	ldd	r25, Y+62	; 0x3e
    1784:	9a af       	std	Y+58, r25	; 0x3a
    1786:	89 af       	std	Y+57, r24	; 0x39
    1788:	89 ad       	ldd	r24, Y+57	; 0x39
    178a:	9a ad       	ldd	r25, Y+58	; 0x3a
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <HLCD_voidInt+0x11c>
    1790:	9a af       	std	Y+58, r25	; 0x3a
    1792:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(30);
	HLCD_voidSendCommand(LCD_functionset);
    1794:	8c e3       	ldi	r24, 0x3C	; 60
    1796:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e8       	ldi	r26, 0x80	; 128
    17a0:	bf e3       	ldi	r27, 0x3F	; 63
    17a2:	8d ab       	std	Y+53, r24	; 0x35
    17a4:	9e ab       	std	Y+54, r25	; 0x36
    17a6:	af ab       	std	Y+55, r26	; 0x37
    17a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6d a9       	ldd	r22, Y+53	; 0x35
    17ac:	7e a9       	ldd	r23, Y+54	; 0x36
    17ae:	8f a9       	ldd	r24, Y+55	; 0x37
    17b0:	98 ad       	ldd	r25, Y+56	; 0x38
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a ef       	ldi	r20, 0xFA	; 250
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	89 ab       	std	Y+49, r24	; 0x31
    17c4:	9a ab       	std	Y+50, r25	; 0x32
    17c6:	ab ab       	std	Y+51, r26	; 0x33
    17c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ca:	69 a9       	ldd	r22, Y+49	; 0x31
    17cc:	7a a9       	ldd	r23, Y+50	; 0x32
    17ce:	8b a9       	ldd	r24, Y+51	; 0x33
    17d0:	9c a9       	ldd	r25, Y+52	; 0x34
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <HLCD_voidInt+0x17c>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	98 ab       	std	Y+48, r25	; 0x30
    17e8:	8f a7       	std	Y+47, r24	; 0x2f
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <HLCD_voidInt+0x1fa>
	else if (__tmp > 65535)
    17ec:	69 a9       	ldd	r22, Y+49	; 0x31
    17ee:	7a a9       	ldd	r23, Y+50	; 0x32
    17f0:	8b a9       	ldd	r24, Y+51	; 0x33
    17f2:	9c a9       	ldd	r25, Y+52	; 0x34
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <HLCD_voidInt+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6d a9       	ldd	r22, Y+53	; 0x35
    1806:	7e a9       	ldd	r23, Y+54	; 0x36
    1808:	8f a9       	ldd	r24, Y+55	; 0x37
    180a:	98 ad       	ldd	r25, Y+56	; 0x38
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	98 ab       	std	Y+48, r25	; 0x30
    182a:	8f a7       	std	Y+47, r24	; 0x2f
    182c:	0f c0       	rjmp	.+30     	; 0x184c <HLCD_voidInt+0x1dc>
    182e:	88 ec       	ldi	r24, 0xC8	; 200
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	9e a7       	std	Y+46, r25	; 0x2e
    1834:	8d a7       	std	Y+45, r24	; 0x2d
    1836:	8d a5       	ldd	r24, Y+45	; 0x2d
    1838:	9e a5       	ldd	r25, Y+46	; 0x2e
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <HLCD_voidInt+0x1ca>
    183e:	9e a7       	std	Y+46, r25	; 0x2e
    1840:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8f a5       	ldd	r24, Y+47	; 0x2f
    1844:	98 a9       	ldd	r25, Y+48	; 0x30
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	98 ab       	std	Y+48, r25	; 0x30
    184a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8f a5       	ldd	r24, Y+47	; 0x2f
    184e:	98 a9       	ldd	r25, Y+48	; 0x30
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <HLCD_voidInt+0x1be>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <HLCD_voidInt+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	69 a9       	ldd	r22, Y+49	; 0x31
    1858:	7a a9       	ldd	r23, Y+50	; 0x32
    185a:	8b a9       	ldd	r24, Y+51	; 0x33
    185c:	9c a9       	ldd	r25, Y+52	; 0x34
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	9c a7       	std	Y+44, r25	; 0x2c
    1870:	8b a7       	std	Y+43, r24	; 0x2b
    1872:	8b a5       	ldd	r24, Y+43	; 0x2b
    1874:	9c a5       	ldd	r25, Y+44	; 0x2c
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <HLCD_voidInt+0x206>
    187a:	9c a7       	std	Y+44, r25	; 0x2c
    187c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//display on/off 0b00001100

	HLCD_voidSendCommand(LCD_DisplayONOFF);
    187e:	8c e0       	ldi	r24, 0x0C	; 12
    1880:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	bf e3       	ldi	r27, 0x3F	; 63
    188c:	8f a3       	std	Y+39, r24	; 0x27
    188e:	98 a7       	std	Y+40, r25	; 0x28
    1890:	a9 a7       	std	Y+41, r26	; 0x29
    1892:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1894:	6f a1       	ldd	r22, Y+39	; 0x27
    1896:	78 a5       	ldd	r23, Y+40	; 0x28
    1898:	89 a5       	ldd	r24, Y+41	; 0x29
    189a:	9a a5       	ldd	r25, Y+42	; 0x2a
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a ef       	ldi	r20, 0xFA	; 250
    18a2:	54 e4       	ldi	r21, 0x44	; 68
    18a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	8b a3       	std	Y+35, r24	; 0x23
    18ae:	9c a3       	std	Y+36, r25	; 0x24
    18b0:	ad a3       	std	Y+37, r26	; 0x25
    18b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <HLCD_voidInt+0x266>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
    18d4:	3f c0       	rjmp	.+126    	; 0x1954 <HLCD_voidInt+0x2e4>
	else if (__tmp > 65535)
    18d6:	6b a1       	ldd	r22, Y+35	; 0x23
    18d8:	7c a1       	ldd	r23, Y+36	; 0x24
    18da:	8d a1       	ldd	r24, Y+37	; 0x25
    18dc:	9e a1       	ldd	r25, Y+38	; 0x26
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	3f ef       	ldi	r19, 0xFF	; 255
    18e2:	4f e7       	ldi	r20, 0x7F	; 127
    18e4:	57 e4       	ldi	r21, 0x47	; 71
    18e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	4c f5       	brge	.+82     	; 0x1940 <HLCD_voidInt+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ee:	6f a1       	ldd	r22, Y+39	; 0x27
    18f0:	78 a5       	ldd	r23, Y+40	; 0x28
    18f2:	89 a5       	ldd	r24, Y+41	; 0x29
    18f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e2       	ldi	r20, 0x20	; 32
    18fc:	51 e4       	ldi	r21, 0x41	; 65
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <HLCD_voidInt+0x2c6>
    1918:	88 ec       	ldi	r24, 0xC8	; 200
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	98 a3       	std	Y+32, r25	; 0x20
    191e:	8f 8f       	std	Y+31, r24	; 0x1f
    1920:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1922:	98 a1       	ldd	r25, Y+32	; 0x20
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <HLCD_voidInt+0x2b4>
    1928:	98 a3       	std	Y+32, r25	; 0x20
    192a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192c:	89 a1       	ldd	r24, Y+33	; 0x21
    192e:	9a a1       	ldd	r25, Y+34	; 0x22
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	9a a3       	std	Y+34, r25	; 0x22
    1934:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1936:	89 a1       	ldd	r24, Y+33	; 0x21
    1938:	9a a1       	ldd	r25, Y+34	; 0x22
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	69 f7       	brne	.-38     	; 0x1918 <HLCD_voidInt+0x2a8>
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <HLCD_voidInt+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1940:	6b a1       	ldd	r22, Y+35	; 0x23
    1942:	7c a1       	ldd	r23, Y+36	; 0x24
    1944:	8d a1       	ldd	r24, Y+37	; 0x25
    1946:	9e a1       	ldd	r25, Y+38	; 0x26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	9e 8f       	std	Y+30, r25	; 0x1e
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <HLCD_voidInt+0x2f0>
    1964:	9e 8f       	std	Y+30, r25	; 0x1e
    1966:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//display clear  0b00000001
	HLCD_voidSendCommand(LCD_Clear);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e8       	ldi	r26, 0x80	; 128
    1974:	bf e3       	ldi	r27, 0x3F	; 63
    1976:	89 8f       	std	Y+25, r24	; 0x19
    1978:	9a 8f       	std	Y+26, r25	; 0x1a
    197a:	ab 8f       	std	Y+27, r26	; 0x1b
    197c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	69 8d       	ldd	r22, Y+25	; 0x19
    1980:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8d 8b       	std	Y+21, r24	; 0x15
    1998:	9e 8b       	std	Y+22, r25	; 0x16
    199a:	af 8b       	std	Y+23, r26	; 0x17
    199c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <HLCD_voidInt+0x350>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9c 8b       	std	Y+20, r25	; 0x14
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <HLCD_voidInt+0x3ce>
	else if (__tmp > 65535)
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <HLCD_voidInt+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	69 8d       	ldd	r22, Y+25	; 0x19
    19da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <HLCD_voidInt+0x3b0>
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9a 8b       	std	Y+18, r25	; 0x12
    1a08:	89 8b       	std	Y+17, r24	; 0x11
    1a0a:	89 89       	ldd	r24, Y+17	; 0x11
    1a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <HLCD_voidInt+0x39e>
    1a12:	9a 8b       	std	Y+18, r25	; 0x12
    1a14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8b 89       	ldd	r24, Y+19	; 0x13
    1a18:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <HLCD_voidInt+0x392>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <HLCD_voidInt+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a30:	98 8d       	ldd	r25, Y+24	; 0x18
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9c 8b       	std	Y+20, r25	; 0x14
    1a3c:	8b 8b       	std	Y+19, r24	; 0x13
    1a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a40:	9c 89       	ldd	r25, Y+20	; 0x14
    1a42:	98 8b       	std	Y+16, r25	; 0x10
    1a44:	8f 87       	std	Y+15, r24	; 0x0f
    1a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a48:	98 89       	ldd	r25, Y+16	; 0x10
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <HLCD_voidInt+0x3da>
    1a4e:	98 8b       	std	Y+16, r25	; 0x10
    1a50:	8f 87       	std	Y+15, r24	; 0x0f
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e0       	ldi	r26, 0x00	; 0
    1a58:	b0 e4       	ldi	r27, 0x40	; 64
    1a5a:	8b 87       	std	Y+11, r24	; 0x0b
    1a5c:	9c 87       	std	Y+12, r25	; 0x0c
    1a5e:	ad 87       	std	Y+13, r26	; 0x0d
    1a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a ef       	ldi	r20, 0xFA	; 250
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	98 87       	std	Y+8, r25	; 0x08
    1a7e:	a9 87       	std	Y+9, r26	; 0x09
    1a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <HLCD_voidInt+0x434>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <HLCD_voidInt+0x4b2>
	else if (__tmp > 65535)
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <HLCD_voidInt+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <HLCD_voidInt+0x494>
    1ae6:	88 ec       	ldi	r24, 0xC8	; 200
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <HLCD_voidInt+0x482>
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <HLCD_voidInt+0x476>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <HLCD_voidInt+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <HLCD_voidInt+0x4be>
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


	_delay_ms(2);
	//entry mode     0b00000110
	HLCD_voidSendCommand(LCD_EntryMode);
    1b36:	86 e0       	ldi	r24, 0x06	; 6
    1b38:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>


}
    1b3c:	ca 5b       	subi	r28, 0xBA	; 186
    1b3e:	df 4f       	sbci	r29, 0xFF	; 255
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	08 95       	ret

00001b54 <HLCD_voidClear>:



void HLCD_voidClear()
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61

	//display clear  0b00000001
	HLCD_voidSendCommand(LCD_Clear);
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	b0 e4       	ldi	r27, 0x40	; 64
    1b76:	8b 87       	std	Y+11, r24	; 0x0b
    1b78:	9c 87       	std	Y+12, r25	; 0x0c
    1b7a:	ad 87       	std	Y+13, r26	; 0x0d
    1b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a ef       	ldi	r20, 0xFA	; 250
    1b8c:	54 e4       	ldi	r21, 0x44	; 68
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	8f 83       	std	Y+7, r24	; 0x07
    1b98:	98 87       	std	Y+8, r25	; 0x08
    1b9a:	a9 87       	std	Y+9, r26	; 0x09
    1b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba0:	78 85       	ldd	r23, Y+8	; 0x08
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <HLCD_voidClear+0x6c>
		__ticks = 1;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	3f c0       	rjmp	.+126    	; 0x1c3e <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	4c f5       	brge	.+82     	; 0x1c2a <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e2       	ldi	r20, 0x20	; 32
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	bc 01       	movw	r22, r24
    1bf2:	cd 01       	movw	r24, r26
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
    1c00:	0f c0       	rjmp	.+30     	; 0x1c20 <HLCD_voidClear+0xcc>
    1c02:	88 ec       	ldi	r24, 0xC8	; 200
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <HLCD_voidClear+0xba>
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
    1c18:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	69 f7       	brne	.-38     	; 0x1c02 <HLCD_voidClear+0xae>
    1c28:	14 c0       	rjmp	.+40     	; 0x1c52 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	9a 83       	std	Y+2, r25	; 0x02
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <HLCD_voidClear+0xf6>
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c52:	2e 96       	adiw	r28, 0x0e	; 14
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <HLCD_voidSendString>:


void HLCD_voidSendString(u8 *A_u8PtrString)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <HLCD_voidSendString+0x6>
    1c6a:	0f 92       	push	r0
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	9b 83       	std	Y+3, r25	; 0x03
    1c72:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8cnt=0;
    1c74:	19 82       	std	Y+1, r1	; 0x01
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <HLCD_voidSendString+0x32>
	while(A_u8PtrString[L_u8cnt] !="\0")
	{
		HLCD_voidSendData(A_u8PtrString[L_u8cnt++]);
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	fc 01       	movw	r30, r24
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	90 81       	ld	r25, Z
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	8f 5f       	subi	r24, 0xFF	; 255
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	89 2f       	mov	r24, r25
    1c92:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>


void HLCD_voidSendString(u8 *A_u8PtrString)
{
	u8 L_u8cnt=0;
	while(A_u8PtrString[L_u8cnt] !="\0")
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e2 0f       	add	r30, r18
    1ca4:	f3 1f       	adc	r31, r19
    1ca6:	80 81       	ld	r24, Z
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	80 36       	cpi	r24, 0x60	; 96
    1cb0:	92 07       	cpc	r25, r18
    1cb2:	11 f7       	brne	.-60     	; 0x1c78 <HLCD_voidSendString+0x14>
	{
		HLCD_voidSendData(A_u8PtrString[L_u8cnt++]);
	}

}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <HLCD_voidCursor>:




void HLCD_voidCursor(u8 A_u8LinePos , u8 A_u8LineNo)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <HLCD_voidCursor+0x6>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <HLCD_voidCursor+0x8>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	6a 83       	std	Y+2, r22	; 0x02

	switch(A_u8LineNo)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3c 83       	std	Y+4, r19	; 0x04
    1cd8:	2b 83       	std	Y+3, r18	; 0x03
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	31 f0       	breq	.+12     	; 0x1cee <HLCD_voidCursor+0x2e>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	21 30       	cpi	r18, 0x01	; 1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	31 f0       	breq	.+12     	; 0x1cf8 <HLCD_voidCursor+0x38>
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <HLCD_voidCursor+0x40>
	{

	case LCD_LINE0: HLCD_voidSendCommand(0x80 + 0 + A_u8LinePos);break;
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	80 58       	subi	r24, 0x80	; 128
    1cf2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <HLCD_voidCursor+0x40>
	case LCD_LINE1 : HLCD_voidSendCommand(0x80 + 64 + A_u8LinePos);break;
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	80 54       	subi	r24, 0x40	; 64
    1cfc:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
	}
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <HLCD_voidDisplyNumber>:


void HLCD_voidDisplyNumber(s32 A_s32Num){
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	29 97       	sbiw	r28, 0x09	; 9
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	6e 83       	std	Y+6, r22	; 0x06
    1d2c:	7f 83       	std	Y+7, r23	; 0x07
    1d2e:	88 87       	std	Y+8, r24	; 0x08
    1d30:	99 87       	std	Y+9, r25	; 0x09
	if(A_s32Num==0)
    1d32:	8e 81       	ldd	r24, Y+6	; 0x06
    1d34:	9f 81       	ldd	r25, Y+7	; 0x07
    1d36:	a8 85       	ldd	r26, Y+8	; 0x08
    1d38:	b9 85       	ldd	r27, Y+9	; 0x09
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	a1 05       	cpc	r26, r1
    1d3e:	b1 05       	cpc	r27, r1
    1d40:	21 f4       	brne	.+8      	; 0x1d4a <HLCD_voidDisplyNumber+0x3c>
		{
			HLCD_voidDisplayChar('0');
    1d42:	80 e3       	ldi	r24, 0x30	; 48
    1d44:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <HLCD_voidDisplayChar>
    1d48:	ba c0       	rjmp	.+372    	; 0x1ebe <HLCD_voidDisplyNumber+0x1b0>
			return;
		}
		u32 L_u32Num=0;
    1d4a:	1a 82       	std	Y+2, r1	; 0x02
    1d4c:	1b 82       	std	Y+3, r1	; 0x03
    1d4e:	1c 82       	std	Y+4, r1	; 0x04
    1d50:	1d 82       	std	Y+5, r1	; 0x05
		u8 flag=0;
    1d52:	19 82       	std	Y+1, r1	; 0x01
		if (A_s32Num < 0)
    1d54:	8e 81       	ldd	r24, Y+6	; 0x06
    1d56:	9f 81       	ldd	r25, Y+7	; 0x07
    1d58:	a8 85       	ldd	r26, Y+8	; 0x08
    1d5a:	b9 85       	ldd	r27, Y+9	; 0x09
    1d5c:	bb 23       	and	r27, r27
    1d5e:	44 f5       	brge	.+80     	; 0x1db0 <HLCD_voidDisplyNumber+0xa2>
		{
			HLCD_voidDisplayChar('-');
    1d60:	8d e2       	ldi	r24, 0x2D	; 45
    1d62:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <HLCD_voidDisplayChar>
			A_s32Num*=-1;
    1d66:	8e 81       	ldd	r24, Y+6	; 0x06
    1d68:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6a:	a8 85       	ldd	r26, Y+8	; 0x08
    1d6c:	b9 85       	ldd	r27, Y+9	; 0x09
    1d6e:	b0 95       	com	r27
    1d70:	a0 95       	com	r26
    1d72:	90 95       	com	r25
    1d74:	81 95       	neg	r24
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	af 4f       	sbci	r26, 0xFF	; 255
    1d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d7c:	8e 83       	std	Y+6, r24	; 0x06
    1d7e:	9f 83       	std	Y+7, r25	; 0x07
    1d80:	a8 87       	std	Y+8, r26	; 0x08
    1d82:	b9 87       	std	Y+9, r27	; 0x09
    1d84:	15 c0       	rjmp	.+42     	; 0x1db0 <HLCD_voidDisplyNumber+0xa2>
		}
		while ((A_s32Num % 10) == 0)
			{
				flag++;
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	89 83       	std	Y+1, r24	; 0x01
				A_s32Num/=10;
    1d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d90:	a8 85       	ldd	r26, Y+8	; 0x08
    1d92:	b9 85       	ldd	r27, Y+9	; 0x09
    1d94:	2a e0       	ldi	r18, 0x0A	; 10
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    1da4:	da 01       	movw	r26, r20
    1da6:	c9 01       	movw	r24, r18
    1da8:	8e 83       	std	Y+6, r24	; 0x06
    1daa:	9f 83       	std	Y+7, r25	; 0x07
    1dac:	a8 87       	std	Y+8, r26	; 0x08
    1dae:	b9 87       	std	Y+9, r27	; 0x09
		if (A_s32Num < 0)
		{
			HLCD_voidDisplayChar('-');
			A_s32Num*=-1;
		}
		while ((A_s32Num % 10) == 0)
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	a8 85       	ldd	r26, Y+8	; 0x08
    1db6:	b9 85       	ldd	r27, Y+9	; 0x09
    1db8:	2a e0       	ldi	r18, 0x0A	; 10
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	a1 05       	cpc	r26, r1
    1dd0:	b1 05       	cpc	r27, r1
    1dd2:	c9 f2       	breq	.-78     	; 0x1d86 <HLCD_voidDisplyNumber+0x78>
    1dd4:	36 c0       	rjmp	.+108    	; 0x1e42 <HLCD_voidDisplyNumber+0x134>
				flag++;
				A_s32Num/=10;
			}
		while (A_s32Num !=0)
		{
			L_u32Num=((L_u32Num*10)+(A_s32Num%10));
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	ac 81       	ldd	r26, Y+4	; 0x04
    1ddc:	bd 81       	ldd	r27, Y+5	; 0x05
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsi3>
    1dee:	7b 01       	movw	r14, r22
    1df0:	8c 01       	movw	r16, r24
    1df2:	8e 81       	ldd	r24, Y+6	; 0x06
    1df4:	9f 81       	ldd	r25, Y+7	; 0x07
    1df6:	a8 85       	ldd	r26, Y+8	; 0x08
    1df8:	b9 85       	ldd	r27, Y+9	; 0x09
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8e 0d       	add	r24, r14
    1e10:	9f 1d       	adc	r25, r15
    1e12:	a0 1f       	adc	r26, r16
    1e14:	b1 1f       	adc	r27, r17
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	9b 83       	std	Y+3, r25	; 0x03
    1e1a:	ac 83       	std	Y+4, r26	; 0x04
    1e1c:	bd 83       	std	Y+5, r27	; 0x05
			A_s32Num/=10;
    1e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e20:	9f 81       	ldd	r25, Y+7	; 0x07
    1e22:	a8 85       	ldd	r26, Y+8	; 0x08
    1e24:	b9 85       	ldd	r27, Y+9	; 0x09
    1e26:	2a e0       	ldi	r18, 0x0A	; 10
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    1e36:	da 01       	movw	r26, r20
    1e38:	c9 01       	movw	r24, r18
    1e3a:	8e 83       	std	Y+6, r24	; 0x06
    1e3c:	9f 83       	std	Y+7, r25	; 0x07
    1e3e:	a8 87       	std	Y+8, r26	; 0x08
    1e40:	b9 87       	std	Y+9, r27	; 0x09
		while ((A_s32Num % 10) == 0)
			{
				flag++;
				A_s32Num/=10;
			}
		while (A_s32Num !=0)
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	a8 85       	ldd	r26, Y+8	; 0x08
    1e48:	b9 85       	ldd	r27, Y+9	; 0x09
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	a1 05       	cpc	r26, r1
    1e4e:	b1 05       	cpc	r27, r1
    1e50:	11 f6       	brne	.-124    	; 0x1dd6 <HLCD_voidDisplyNumber+0xc8>
    1e52:	23 c0       	rjmp	.+70     	; 0x1e9a <HLCD_voidDisplyNumber+0x18c>
			L_u32Num=((L_u32Num*10)+(A_s32Num%10));
			A_s32Num/=10;
		}
		while (L_u32Num >0)
		{
			HLCD_voidSendData((L_u32Num%10)+48);
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	ac 81       	ldd	r26, Y+4	; 0x04
    1e5a:	bd 81       	ldd	r27, Y+5	; 0x05
    1e5c:	2a e0       	ldi	r18, 0x0A	; 10
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	80 5d       	subi	r24, 0xD0	; 208
    1e72:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
			L_u32Num/=10;
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	ac 81       	ldd	r26, Y+4	; 0x04
    1e7c:	bd 81       	ldd	r27, Y+5	; 0x05
    1e7e:	2a e0       	ldi	r18, 0x0A	; 10
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <__udivmodsi4>
    1e8e:	da 01       	movw	r26, r20
    1e90:	c9 01       	movw	r24, r18
    1e92:	8a 83       	std	Y+2, r24	; 0x02
    1e94:	9b 83       	std	Y+3, r25	; 0x03
    1e96:	ac 83       	std	Y+4, r26	; 0x04
    1e98:	bd 83       	std	Y+5, r27	; 0x05
		while (A_s32Num !=0)
		{
			L_u32Num=((L_u32Num*10)+(A_s32Num%10));
			A_s32Num/=10;
		}
		while (L_u32Num >0)
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9e:	ac 81       	ldd	r26, Y+4	; 0x04
    1ea0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	a1 05       	cpc	r26, r1
    1ea6:	b1 05       	cpc	r27, r1
    1ea8:	a9 f6       	brne	.-86     	; 0x1e54 <HLCD_voidDisplyNumber+0x146>
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <HLCD_voidDisplyNumber+0x1aa>
			HLCD_voidSendData((L_u32Num%10)+48);
			L_u32Num/=10;
		}
		while (flag !=0)
		{
			HLCD_voidDisplayChar('0');
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <HLCD_voidDisplayChar>
			flag--;
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	81 50       	subi	r24, 0x01	; 1
    1eb6:	89 83       	std	Y+1, r24	; 0x01
		while (L_u32Num >0)
		{
			HLCD_voidSendData((L_u32Num%10)+48);
			L_u32Num/=10;
		}
		while (flag !=0)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	88 23       	and	r24, r24
    1ebc:	b9 f7       	brne	.-18     	; 0x1eac <HLCD_voidDisplyNumber+0x19e>
		{
			HLCD_voidDisplayChar('0');
			flag--;
		}
}
    1ebe:	29 96       	adiw	r28, 0x09	; 9
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	08 95       	ret

00001ed8 <HLCD_voidDisplayChar>:

void HLCD_voidDisplayChar(u8 A_u8Char)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendData(A_u8Char);
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
}
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <HLCD_voidSaveCustomChar>:


void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex,u8 A_u8CustmArr[]){
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <HLCD_voidSaveCustomChar+0x6>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <HLCD_voidSaveCustomChar+0x8>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	7c 83       	std	Y+4, r23	; 0x04
    1f02:	6b 83       	std	Y+3, r22	; 0x03
			HLCD_voidSendCommand(0b01000000+(A_u8CGRAMIndex*8));//num of location jumps
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	08 96       	adiw	r24, 0x08	; 8
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>
			for(u8 L_u8Index=0;L_u8Index<8;L_u8Index++){
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	0e c0       	rjmp	.+28     	; 0x1f3c <HLCD_voidSaveCustomChar+0x4a>
				HLCD_voidSendData(A_u8CustmArr[L_u8Index]);
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	e2 0f       	add	r30, r18
    1f2e:	f3 1f       	adc	r31, r19
    1f30:	80 81       	ld	r24, Z
    1f32:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
}


void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex,u8 A_u8CustmArr[]){
			HLCD_voidSendCommand(0b01000000+(A_u8CGRAMIndex*8));//num of location jumps
			for(u8 L_u8Index=0;L_u8Index<8;L_u8Index++){
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	88 30       	cpi	r24, 0x08	; 8
    1f40:	78 f3       	brcs	.-34     	; 0x1f20 <HLCD_voidSaveCustomChar+0x2e>
				HLCD_voidSendData(A_u8CustmArr[L_u8Index]);

			}
			HLCD_voidSendCommand(0x80);//IMP BACK TO DDRAM
    1f42:	80 e8       	ldi	r24, 0x80	; 128
    1f44:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <HLCD_voidSendCommand>

}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar(u8 A_u8CGRAMIndex){
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CGRAMIndex <8){
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	88 30       	cpi	r24, 0x08	; 8
    1f66:	18 f4       	brcc	.+6      	; 0x1f6e <HLCD_voidDisplayCustomChar+0x18>
		HLCD_voidSendData(A_u8CGRAMIndex);
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
	}
}
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <HKPD_voidInit>:
		{'1','2','3','-'},
		{'c','0','=','+'}
							};

void HKPD_voidInit(u8 A_u8PortNum)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
	G_u8PortNum=A_u8PortNum;
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	80 93 82 00 	sts	0x0082, r24
	MDIO_voidSetPortDirection(G_u8PortNum,0X0F);
    1f88:	80 91 82 00 	lds	r24, 0x0082
    1f8c:	6f e0       	ldi	r22, 0x0F	; 15
    1f8e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidSetPortDirection>
	MDIO_voidSetPortValue(G_u8PortNum,0XFF);
    1f92:	80 91 82 00 	lds	r24, 0x0082
    1f96:	6f ef       	ldi	r22, 0xFF	; 255
    1f98:	0e 94 ae 08 	call	0x115c	; 0x115c <MDIO_voidSetPortValue>
}
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <HKPD_u8GetKeyPressed>:

u8 HKPD_u8GetKeyPressed()
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	61 97       	sbiw	r28, 0x11	; 17
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8PressedKey=' ';
    1fb8:	80 e2       	ldi	r24, 0x20	; 32
    1fba:	89 8b       	std	Y+17, r24	; 0x11
	for(u8 col=0; col<ColNumber; col++)
    1fbc:	18 8a       	std	Y+16, r1	; 0x10
    1fbe:	b2 c0       	rjmp	.+356    	; 0x2124 <HKPD_u8GetKeyPressed+0x180>
	{
		MDIO_voidSetPinValue(G_u8PortNum,col,LOW);
    1fc0:	80 91 82 00 	lds	r24, 0x0082
    1fc4:	68 89       	ldd	r22, Y+16	; 0x10
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
		for(u8 row=0; row<RowNumber; row++)
    1fcc:	1f 86       	std	Y+15, r1	; 0x0f
    1fce:	9d c0       	rjmp	.+314    	; 0x210a <HKPD_u8GetKeyPressed+0x166>
		{
			if(MDIO_U8GetPinValue(G_u8PortNum,row+ColNumber)==LOW)
    1fd0:	20 91 82 00 	lds	r18, 0x0082
    1fd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd6:	98 2f       	mov	r25, r24
    1fd8:	9c 5f       	subi	r25, 0xFC	; 252
    1fda:	82 2f       	mov	r24, r18
    1fdc:	69 2f       	mov	r22, r25
    1fde:	0e 94 e7 07 	call	0xfce	; 0xfce <MDIO_U8GetPinValue>
    1fe2:	88 23       	and	r24, r24
    1fe4:	91 f4       	brne	.+36     	; 0x200a <HKPD_u8GetKeyPressed+0x66>
			{
				L_u8PressedKey=G_u8Grid[row][col];
    1fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe8:	48 2f       	mov	r20, r24
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	88 89       	ldd	r24, Y+16	; 0x10
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	ca 01       	movw	r24, r20
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	fc 01       	movw	r30, r24
    2002:	ef 58       	subi	r30, 0x8F	; 143
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	89 8b       	std	Y+17, r24	; 0x11
			}
			while(MDIO_U8GetPinValue(G_u8PortNum,row+ColNumber)==LOW) {}
    200a:	20 91 82 00 	lds	r18, 0x0082
    200e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2010:	98 2f       	mov	r25, r24
    2012:	9c 5f       	subi	r25, 0xFC	; 252
    2014:	82 2f       	mov	r24, r18
    2016:	69 2f       	mov	r22, r25
    2018:	0e 94 e7 07 	call	0xfce	; 0xfce <MDIO_U8GetPinValue>
    201c:	88 23       	and	r24, r24
    201e:	a9 f3       	breq	.-22     	; 0x200a <HKPD_u8GetKeyPressed+0x66>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 ea       	ldi	r26, 0xA0	; 160
    2026:	b0 e4       	ldi	r27, 0x40	; 64
    2028:	8b 87       	std	Y+11, r24	; 0x0b
    202a:	9c 87       	std	Y+12, r25	; 0x0c
    202c:	ad 87       	std	Y+13, r26	; 0x0d
    202e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6b 85       	ldd	r22, Y+11	; 0x0b
    2032:	7c 85       	ldd	r23, Y+12	; 0x0c
    2034:	8d 85       	ldd	r24, Y+13	; 0x0d
    2036:	9e 85       	ldd	r25, Y+14	; 0x0e
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a ef       	ldi	r20, 0xFA	; 250
    203e:	54 e4       	ldi	r21, 0x44	; 68
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8f 83       	std	Y+7, r24	; 0x07
    204a:	98 87       	std	Y+8, r25	; 0x08
    204c:	a9 87       	std	Y+9, r26	; 0x09
    204e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <HKPD_u8GetKeyPressed+0xce>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <HKPD_u8GetKeyPressed+0x14c>
	else if (__tmp > 65535)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <HKPD_u8GetKeyPressed+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6b 85       	ldd	r22, Y+11	; 0x0b
    208c:	7c 85       	ldd	r23, Y+12	; 0x0c
    208e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2090:	9e 85       	ldd	r25, Y+14	; 0x0e
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <HKPD_u8GetKeyPressed+0x12e>
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <HKPD_u8GetKeyPressed+0x11c>
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <HKPD_u8GetKeyPressed+0x110>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <HKPD_u8GetKeyPressed+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e 83       	std	Y+6, r25	; 0x06
    20ee:	8d 83       	std	Y+5, r24	; 0x05
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	9e 81       	ldd	r25, Y+6	; 0x06
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <HKPD_u8GetKeyPressed+0x158>
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
{
	u8 L_u8PressedKey=' ';
	for(u8 col=0; col<ColNumber; col++)
	{
		MDIO_voidSetPinValue(G_u8PortNum,col,LOW);
		for(u8 row=0; row<RowNumber; row++)
    2104:	8f 85       	ldd	r24, Y+15	; 0x0f
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	8f 87       	std	Y+15, r24	; 0x0f
    210a:	8f 85       	ldd	r24, Y+15	; 0x0f
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	08 f4       	brcc	.+2      	; 0x2112 <HKPD_u8GetKeyPressed+0x16e>
    2110:	5f cf       	rjmp	.-322    	; 0x1fd0 <HKPD_u8GetKeyPressed+0x2c>
			}
			while(MDIO_U8GetPinValue(G_u8PortNum,row+ColNumber)==LOW) {}
			_delay_ms(5);

		}
		MDIO_voidSetPinValue(G_u8PortNum,col,HIGH);
    2112:	80 91 82 00 	lds	r24, 0x0082
    2116:	68 89       	ldd	r22, Y+16	; 0x10
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <MDIO_voidSetPinValue>
}

u8 HKPD_u8GetKeyPressed()
{
	u8 L_u8PressedKey=' ';
	for(u8 col=0; col<ColNumber; col++)
    211e:	88 89       	ldd	r24, Y+16	; 0x10
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	88 8b       	std	Y+16, r24	; 0x10
    2124:	88 89       	ldd	r24, Y+16	; 0x10
    2126:	84 30       	cpi	r24, 0x04	; 4
    2128:	08 f4       	brcc	.+2      	; 0x212c <HKPD_u8GetKeyPressed+0x188>
    212a:	4a cf       	rjmp	.-364    	; 0x1fc0 <HKPD_u8GetKeyPressed+0x1c>
			_delay_ms(5);

		}
		MDIO_voidSetPinValue(G_u8PortNum,col,HIGH);
	}
	return L_u8PressedKey;
    212c:	89 89       	ldd	r24, Y+17	; 0x11
}
    212e:	61 96       	adiw	r28, 0x11	; 17
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <main>:
#include "../HAL/KEY_PAD/Key_int.h"
#include "../HAL/LCD/LCD_int.h"



int main() {
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	aa 97       	sbiw	r28, 0x2a	; 42
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPortDirection(PORTA, 0xFF);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	6f ef       	ldi	r22, 0xFF	; 255
    2158:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidSetPortDirection>
    MDIO_voidSetPortDirection(PORTB, 0xFF);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	6f ef       	ldi	r22, 0xFF	; 255
    2160:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <MDIO_voidSetPortDirection>
    HLCD_voidInt();
    2164:	0e 94 38 0b 	call	0x1670	; 0x1670 <HLCD_voidInt>
    HKPD_voidInit(KPD_PORT);
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <HKPD_voidInit>

    s32 currentNumber = 0;     // Store the current input number (negative or positive)
    216e:	1f a2       	std	Y+39, r1	; 0x27
    2170:	18 a6       	std	Y+40, r1	; 0x28
    2172:	19 a6       	std	Y+41, r1	; 0x29
    2174:	1a a6       	std	Y+42, r1	; 0x2a
    u8 operatorPressed = '\0';  // Store the operator pressed (+, -, *, /)
    2176:	1e a2       	std	Y+38, r1	; 0x26
    s32 result = 0;             // Store the result of calculations
    2178:	1a a2       	std	Y+34, r1	; 0x22
    217a:	1b a2       	std	Y+35, r1	; 0x23
    217c:	1c a2       	std	Y+36, r1	; 0x24
    217e:	1d a2       	std	Y+37, r1	; 0x25

    while (1) {
        u8 key = HKPD_u8GetKeyPressed();
    2180:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <HKPD_u8GetKeyPressed>
    2184:	89 a3       	std	Y+33, r24	; 0x21

        if (key >= '0' && key <= '9') {
    2186:	89 a1       	ldd	r24, Y+33	; 0x21
    2188:	80 33       	cpi	r24, 0x30	; 48
    218a:	28 f1       	brcs	.+74     	; 0x21d6 <main+0x96>
    218c:	89 a1       	ldd	r24, Y+33	; 0x21
    218e:	8a 33       	cpi	r24, 0x3A	; 58
    2190:	10 f5       	brcc	.+68     	; 0x21d6 <main+0x96>
            currentNumber = (currentNumber * 10) + (key - '0');
    2192:	8f a1       	ldd	r24, Y+39	; 0x27
    2194:	98 a5       	ldd	r25, Y+40	; 0x28
    2196:	a9 a5       	ldd	r26, Y+41	; 0x29
    2198:	ba a5       	ldd	r27, Y+42	; 0x2a
    219a:	2a e0       	ldi	r18, 0x0A	; 10
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsi3>
    21aa:	9b 01       	movw	r18, r22
    21ac:	ac 01       	movw	r20, r24
    21ae:	89 a1       	ldd	r24, Y+33	; 0x21
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	c0 97       	sbiw	r24, 0x30	; 48
    21b6:	aa 27       	eor	r26, r26
    21b8:	97 fd       	sbrc	r25, 7
    21ba:	a0 95       	com	r26
    21bc:	ba 2f       	mov	r27, r26
    21be:	82 0f       	add	r24, r18
    21c0:	93 1f       	adc	r25, r19
    21c2:	a4 1f       	adc	r26, r20
    21c4:	b5 1f       	adc	r27, r21
    21c6:	8f a3       	std	Y+39, r24	; 0x27
    21c8:	98 a7       	std	Y+40, r25	; 0x28
    21ca:	a9 a7       	std	Y+41, r26	; 0x29
    21cc:	ba a7       	std	Y+42, r27	; 0x2a
            HLCD_voidSendData(key);
    21ce:	89 a1       	ldd	r24, Y+33	; 0x21
    21d0:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
    21d4:	d5 cf       	rjmp	.-86     	; 0x2180 <main+0x40>
        }
        else if (key == '-') {
    21d6:	89 a1       	ldd	r24, Y+33	; 0x21
    21d8:	8d 32       	cpi	r24, 0x2D	; 45
    21da:	a1 f4       	brne	.+40     	; 0x2204 <main+0xc4>
            if (currentNumber == 0) {
    21dc:	8f a1       	ldd	r24, Y+39	; 0x27
    21de:	98 a5       	ldd	r25, Y+40	; 0x28
    21e0:	a9 a5       	ldd	r26, Y+41	; 0x29
    21e2:	ba a5       	ldd	r27, Y+42	; 0x2a
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	a1 05       	cpc	r26, r1
    21e8:	b1 05       	cpc	r27, r1
    21ea:	51 f6       	brne	.-108    	; 0x2180 <main+0x40>
                currentNumber = -1;  // Indicate that the next input is negative
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	9f ef       	ldi	r25, 0xFF	; 255
    21f0:	af ef       	ldi	r26, 0xFF	; 255
    21f2:	bf ef       	ldi	r27, 0xFF	; 255
    21f4:	8f a3       	std	Y+39, r24	; 0x27
    21f6:	98 a7       	std	Y+40, r25	; 0x28
    21f8:	a9 a7       	std	Y+41, r26	; 0x29
    21fa:	ba a7       	std	Y+42, r27	; 0x2a
                HLCD_voidSendData(key);
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
    2202:	be cf       	rjmp	.-132    	; 0x2180 <main+0x40>
            }
        }
        else if (key == 'c') {
    2204:	89 a1       	ldd	r24, Y+33	; 0x21
    2206:	83 36       	cpi	r24, 0x63	; 99
    2208:	61 f4       	brne	.+24     	; 0x2222 <main+0xe2>
            currentNumber = 0;
    220a:	1f a2       	std	Y+39, r1	; 0x27
    220c:	18 a6       	std	Y+40, r1	; 0x28
    220e:	19 a6       	std	Y+41, r1	; 0x29
    2210:	1a a6       	std	Y+42, r1	; 0x2a
            operatorPressed = '\0';
    2212:	1e a2       	std	Y+38, r1	; 0x26
            result = 0;
    2214:	1a a2       	std	Y+34, r1	; 0x22
    2216:	1b a2       	std	Y+35, r1	; 0x23
    2218:	1c a2       	std	Y+36, r1	; 0x24
    221a:	1d a2       	std	Y+37, r1	; 0x25
            HLCD_voidClear();  // Clear the display
    221c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <HLCD_voidClear>
    2220:	af cf       	rjmp	.-162    	; 0x2180 <main+0x40>
        }
        else if (key == '+' || key == '*' || key == '/') {
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	8b 32       	cpi	r24, 0x2B	; 43
    2226:	39 f0       	breq	.+14     	; 0x2236 <main+0xf6>
    2228:	89 a1       	ldd	r24, Y+33	; 0x21
    222a:	8a 32       	cpi	r24, 0x2A	; 42
    222c:	21 f0       	breq	.+8      	; 0x2236 <main+0xf6>
    222e:	89 a1       	ldd	r24, Y+33	; 0x21
    2230:	8f 32       	cpi	r24, 0x2F	; 47
    2232:	09 f0       	breq	.+2      	; 0x2236 <main+0xf6>
    2234:	15 c1       	rjmp	.+554    	; 0x2460 <main+0x320>
            if (operatorPressed != '\0') {
    2236:	8e a1       	ldd	r24, Y+38	; 0x26
    2238:	88 23       	and	r24, r24
    223a:	09 f4       	brne	.+2      	; 0x223e <main+0xfe>
    223c:	fb c0       	rjmp	.+502    	; 0x2434 <main+0x2f4>
                if (operatorPressed == '+') {
    223e:	8e a1       	ldd	r24, Y+38	; 0x26
    2240:	8b 32       	cpi	r24, 0x2B	; 43
    2242:	89 f4       	brne	.+34     	; 0x2266 <main+0x126>
                    result += currentNumber;
    2244:	8a a1       	ldd	r24, Y+34	; 0x22
    2246:	9b a1       	ldd	r25, Y+35	; 0x23
    2248:	ac a1       	ldd	r26, Y+36	; 0x24
    224a:	bd a1       	ldd	r27, Y+37	; 0x25
    224c:	2f a1       	ldd	r18, Y+39	; 0x27
    224e:	38 a5       	ldd	r19, Y+40	; 0x28
    2250:	49 a5       	ldd	r20, Y+41	; 0x29
    2252:	5a a5       	ldd	r21, Y+42	; 0x2a
    2254:	82 0f       	add	r24, r18
    2256:	93 1f       	adc	r25, r19
    2258:	a4 1f       	adc	r26, r20
    225a:	b5 1f       	adc	r27, r21
    225c:	8a a3       	std	Y+34, r24	; 0x22
    225e:	9b a3       	std	Y+35, r25	; 0x23
    2260:	ac a3       	std	Y+36, r26	; 0x24
    2262:	bd a3       	std	Y+37, r27	; 0x25
    2264:	e3 c0       	rjmp	.+454    	; 0x242c <main+0x2ec>
                }
                else if (operatorPressed == '-') {
    2266:	8e a1       	ldd	r24, Y+38	; 0x26
    2268:	8d 32       	cpi	r24, 0x2D	; 45
    226a:	89 f4       	brne	.+34     	; 0x228e <main+0x14e>
                    result -= currentNumber;
    226c:	8a a1       	ldd	r24, Y+34	; 0x22
    226e:	9b a1       	ldd	r25, Y+35	; 0x23
    2270:	ac a1       	ldd	r26, Y+36	; 0x24
    2272:	bd a1       	ldd	r27, Y+37	; 0x25
    2274:	2f a1       	ldd	r18, Y+39	; 0x27
    2276:	38 a5       	ldd	r19, Y+40	; 0x28
    2278:	49 a5       	ldd	r20, Y+41	; 0x29
    227a:	5a a5       	ldd	r21, Y+42	; 0x2a
    227c:	82 1b       	sub	r24, r18
    227e:	93 0b       	sbc	r25, r19
    2280:	a4 0b       	sbc	r26, r20
    2282:	b5 0b       	sbc	r27, r21
    2284:	8a a3       	std	Y+34, r24	; 0x22
    2286:	9b a3       	std	Y+35, r25	; 0x23
    2288:	ac a3       	std	Y+36, r26	; 0x24
    228a:	bd a3       	std	Y+37, r27	; 0x25
    228c:	cf c0       	rjmp	.+414    	; 0x242c <main+0x2ec>
                }
                else if (operatorPressed == '*') {
    228e:	8e a1       	ldd	r24, Y+38	; 0x26
    2290:	8a 32       	cpi	r24, 0x2A	; 42
    2292:	31 f5       	brne	.+76     	; 0x22e0 <main+0x1a0>
                	if (currentNumber == 0) currentNumber++;
    2294:	8f a1       	ldd	r24, Y+39	; 0x27
    2296:	98 a5       	ldd	r25, Y+40	; 0x28
    2298:	a9 a5       	ldd	r26, Y+41	; 0x29
    229a:	ba a5       	ldd	r27, Y+42	; 0x2a
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	59 f4       	brne	.+22     	; 0x22ba <main+0x17a>
    22a4:	8f a1       	ldd	r24, Y+39	; 0x27
    22a6:	98 a5       	ldd	r25, Y+40	; 0x28
    22a8:	a9 a5       	ldd	r26, Y+41	; 0x29
    22aa:	ba a5       	ldd	r27, Y+42	; 0x2a
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	a1 1d       	adc	r26, r1
    22b0:	b1 1d       	adc	r27, r1
    22b2:	8f a3       	std	Y+39, r24	; 0x27
    22b4:	98 a7       	std	Y+40, r25	; 0x28
    22b6:	a9 a7       	std	Y+41, r26	; 0x29
    22b8:	ba a7       	std	Y+42, r27	; 0x2a
                    result *= currentNumber;
    22ba:	8a a1       	ldd	r24, Y+34	; 0x22
    22bc:	9b a1       	ldd	r25, Y+35	; 0x23
    22be:	ac a1       	ldd	r26, Y+36	; 0x24
    22c0:	bd a1       	ldd	r27, Y+37	; 0x25
    22c2:	2f a1       	ldd	r18, Y+39	; 0x27
    22c4:	38 a5       	ldd	r19, Y+40	; 0x28
    22c6:	49 a5       	ldd	r20, Y+41	; 0x29
    22c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    22ca:	bc 01       	movw	r22, r24
    22cc:	cd 01       	movw	r24, r26
    22ce:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsi3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8a a3       	std	Y+34, r24	; 0x22
    22d8:	9b a3       	std	Y+35, r25	; 0x23
    22da:	ac a3       	std	Y+36, r26	; 0x24
    22dc:	bd a3       	std	Y+37, r27	; 0x25
    22de:	a6 c0       	rjmp	.+332    	; 0x242c <main+0x2ec>
                }
                else if (operatorPressed == '/') {
    22e0:	8e a1       	ldd	r24, Y+38	; 0x26
    22e2:	8f 32       	cpi	r24, 0x2F	; 47
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <main+0x1a8>
    22e6:	a2 c0       	rjmp	.+324    	; 0x242c <main+0x2ec>
                    if (currentNumber != 0) {
    22e8:	8f a1       	ldd	r24, Y+39	; 0x27
    22ea:	98 a5       	ldd	r25, Y+40	; 0x28
    22ec:	a9 a5       	ldd	r26, Y+41	; 0x29
    22ee:	ba a5       	ldd	r27, Y+42	; 0x2a
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	a1 05       	cpc	r26, r1
    22f4:	b1 05       	cpc	r27, r1
    22f6:	99 f0       	breq	.+38     	; 0x231e <main+0x1de>
                        result /= currentNumber;
    22f8:	8a a1       	ldd	r24, Y+34	; 0x22
    22fa:	9b a1       	ldd	r25, Y+35	; 0x23
    22fc:	ac a1       	ldd	r26, Y+36	; 0x24
    22fe:	bd a1       	ldd	r27, Y+37	; 0x25
    2300:	2f a1       	ldd	r18, Y+39	; 0x27
    2302:	38 a5       	ldd	r19, Y+40	; 0x28
    2304:	49 a5       	ldd	r20, Y+41	; 0x29
    2306:	5a a5       	ldd	r21, Y+42	; 0x2a
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    2310:	da 01       	movw	r26, r20
    2312:	c9 01       	movw	r24, r18
    2314:	8a a3       	std	Y+34, r24	; 0x22
    2316:	9b a3       	std	Y+35, r25	; 0x23
    2318:	ac a3       	std	Y+36, r26	; 0x24
    231a:	bd a3       	std	Y+37, r27	; 0x25
    231c:	87 c0       	rjmp	.+270    	; 0x242c <main+0x2ec>
                    }
                    else {
                        HLCD_voidSendString("Error!");
    231e:	82 e6       	ldi	r24, 0x62	; 98
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <HLCD_voidSendString>
                        for (u16 i = 0; i < 2000; i++) {
    2326:	18 a2       	std	Y+32, r1	; 0x20
    2328:	1f 8e       	std	Y+31, r1	; 0x1f
    232a:	77 c0       	rjmp	.+238    	; 0x241a <main+0x2da>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a0 e8       	ldi	r26, 0x80	; 128
    2332:	bf e3       	ldi	r27, 0x3F	; 63
    2334:	89 8f       	std	Y+25, r24	; 0x19
    2336:	9a 8f       	std	Y+26, r25	; 0x1a
    2338:	ab 8f       	std	Y+27, r26	; 0x1b
    233a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	69 8d       	ldd	r22, Y+25	; 0x19
    233e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a ef       	ldi	r20, 0xFA	; 250
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8d 8b       	std	Y+21, r24	; 0x15
    2356:	9e 8b       	std	Y+22, r25	; 0x16
    2358:	af 8b       	std	Y+23, r26	; 0x17
    235a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    235c:	6d 89       	ldd	r22, Y+21	; 0x15
    235e:	7e 89       	ldd	r23, Y+22	; 0x16
    2360:	8f 89       	ldd	r24, Y+23	; 0x17
    2362:	98 8d       	ldd	r25, Y+24	; 0x18
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e8       	ldi	r20, 0x80	; 128
    236a:	5f e3       	ldi	r21, 0x3F	; 63
    236c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2370:	88 23       	and	r24, r24
    2372:	2c f4       	brge	.+10     	; 0x237e <main+0x23e>
		__ticks = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9c 8b       	std	Y+20, r25	; 0x14
    237a:	8b 8b       	std	Y+19, r24	; 0x13
    237c:	3f c0       	rjmp	.+126    	; 0x23fc <main+0x2bc>
	else if (__tmp > 65535)
    237e:	6d 89       	ldd	r22, Y+21	; 0x15
    2380:	7e 89       	ldd	r23, Y+22	; 0x16
    2382:	8f 89       	ldd	r24, Y+23	; 0x17
    2384:	98 8d       	ldd	r25, Y+24	; 0x18
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	3f ef       	ldi	r19, 0xFF	; 255
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	57 e4       	ldi	r21, 0x47	; 71
    238e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	4c f5       	brge	.+82     	; 0x23e8 <main+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2396:	69 8d       	ldd	r22, Y+25	; 0x19
    2398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    239a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e2       	ldi	r20, 0x20	; 32
    23a4:	51 e4       	ldi	r21, 0x41	; 65
    23a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	8b 8b       	std	Y+19, r24	; 0x13
    23be:	0f c0       	rjmp	.+30     	; 0x23de <main+0x29e>
    23c0:	88 ec       	ldi	r24, 0xC8	; 200
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9a 8b       	std	Y+18, r25	; 0x12
    23c6:	89 8b       	std	Y+17, r24	; 0x11
    23c8:	89 89       	ldd	r24, Y+17	; 0x11
    23ca:	9a 89       	ldd	r25, Y+18	; 0x12
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <main+0x28c>
    23d0:	9a 8b       	std	Y+18, r25	; 0x12
    23d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	8b 89       	ldd	r24, Y+19	; 0x13
    23d6:	9c 89       	ldd	r25, Y+20	; 0x14
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23de:	8b 89       	ldd	r24, Y+19	; 0x13
    23e0:	9c 89       	ldd	r25, Y+20	; 0x14
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <main+0x280>
    23e6:	14 c0       	rjmp	.+40     	; 0x2410 <main+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ea:	7e 89       	ldd	r23, Y+22	; 0x16
    23ec:	8f 89       	ldd	r24, Y+23	; 0x17
    23ee:	98 8d       	ldd	r25, Y+24	; 0x18
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9c 8b       	std	Y+20, r25	; 0x14
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	8b 89       	ldd	r24, Y+19	; 0x13
    23fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2400:	98 8b       	std	Y+16, r25	; 0x10
    2402:	8f 87       	std	Y+15, r24	; 0x0f
    2404:	8f 85       	ldd	r24, Y+15	; 0x0f
    2406:	98 89       	ldd	r25, Y+16	; 0x10
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0x2c8>
    240c:	98 8b       	std	Y+16, r25	; 0x10
    240e:	8f 87       	std	Y+15, r24	; 0x0f
    2410:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2412:	98 a1       	ldd	r25, Y+32	; 0x20
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	98 a3       	std	Y+32, r25	; 0x20
    2418:	8f 8f       	std	Y+31, r24	; 0x1f
    241a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    241c:	98 a1       	ldd	r25, Y+32	; 0x20
    241e:	27 e0       	ldi	r18, 0x07	; 7
    2420:	80 3d       	cpi	r24, 0xD0	; 208
    2422:	92 07       	cpc	r25, r18
    2424:	08 f4       	brcc	.+2      	; 0x2428 <main+0x2e8>
    2426:	82 cf       	rjmp	.-252    	; 0x232c <main+0x1ec>
                            _delay_ms(1);  // Wait for 2 seconds
                        }
                        HLCD_voidClear();  // Clear the display after showing error
    2428:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <HLCD_voidClear>
                    }
                }
                HLCD_voidSendData(key);
    242c:	89 a1       	ldd	r24, Y+33	; 0x21
    242e:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <main+0x304>
            }
            else {
                result = currentNumber;
    2434:	8f a1       	ldd	r24, Y+39	; 0x27
    2436:	98 a5       	ldd	r25, Y+40	; 0x28
    2438:	a9 a5       	ldd	r26, Y+41	; 0x29
    243a:	ba a5       	ldd	r27, Y+42	; 0x2a
    243c:	8a a3       	std	Y+34, r24	; 0x22
    243e:	9b a3       	std	Y+35, r25	; 0x23
    2440:	ac a3       	std	Y+36, r26	; 0x24
    2442:	bd a3       	std	Y+37, r27	; 0x25
            }
            currentNumber = 0;  // Reset the current number
    2444:	1f a2       	std	Y+39, r1	; 0x27
    2446:	18 a6       	std	Y+40, r1	; 0x28
    2448:	19 a6       	std	Y+41, r1	; 0x29
    244a:	1a a6       	std	Y+42, r1	; 0x2a
            operatorPressed = key;
    244c:	89 a1       	ldd	r24, Y+33	; 0x21
    244e:	8e a3       	std	Y+38, r24	; 0x26

            if (key == '/') {
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	8f 32       	cpi	r24, 0x2F	; 47
    2454:	09 f0       	breq	.+2      	; 0x2458 <main+0x318>
    2456:	94 ce       	rjmp	.-728    	; 0x2180 <main+0x40>
                HLCD_voidSendData(key);
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	0e 94 15 0a 	call	0x142a	; 0x142a <HLCD_voidSendData>
    245e:	90 ce       	rjmp	.-736    	; 0x2180 <main+0x40>
            }
        }
        else if (key == '=') {
    2460:	89 a1       	ldd	r24, Y+33	; 0x21
    2462:	8d 33       	cpi	r24, 0x3D	; 61
    2464:	09 f0       	breq	.+2      	; 0x2468 <main+0x328>
    2466:	8c ce       	rjmp	.-744    	; 0x2180 <main+0x40>
            if (operatorPressed != '\0') {
    2468:	8e a1       	ldd	r24, Y+38	; 0x26
    246a:	88 23       	and	r24, r24
    246c:	09 f4       	brne	.+2      	; 0x2470 <main+0x330>
    246e:	88 ce       	rjmp	.-752    	; 0x2180 <main+0x40>
                if (operatorPressed == '+') {
    2470:	8e a1       	ldd	r24, Y+38	; 0x26
    2472:	8b 32       	cpi	r24, 0x2B	; 43
    2474:	89 f4       	brne	.+34     	; 0x2498 <main+0x358>
                    result += currentNumber;
    2476:	8a a1       	ldd	r24, Y+34	; 0x22
    2478:	9b a1       	ldd	r25, Y+35	; 0x23
    247a:	ac a1       	ldd	r26, Y+36	; 0x24
    247c:	bd a1       	ldd	r27, Y+37	; 0x25
    247e:	2f a1       	ldd	r18, Y+39	; 0x27
    2480:	38 a5       	ldd	r19, Y+40	; 0x28
    2482:	49 a5       	ldd	r20, Y+41	; 0x29
    2484:	5a a5       	ldd	r21, Y+42	; 0x2a
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	a4 1f       	adc	r26, r20
    248c:	b5 1f       	adc	r27, r21
    248e:	8a a3       	std	Y+34, r24	; 0x22
    2490:	9b a3       	std	Y+35, r25	; 0x23
    2492:	ac a3       	std	Y+36, r26	; 0x24
    2494:	bd a3       	std	Y+37, r27	; 0x25
    2496:	d0 c0       	rjmp	.+416    	; 0x2638 <main+0x4f8>
                }
                else if (operatorPressed == '-') {
    2498:	8e a1       	ldd	r24, Y+38	; 0x26
    249a:	8d 32       	cpi	r24, 0x2D	; 45
    249c:	89 f4       	brne	.+34     	; 0x24c0 <main+0x380>
                    result -= currentNumber;
    249e:	8a a1       	ldd	r24, Y+34	; 0x22
    24a0:	9b a1       	ldd	r25, Y+35	; 0x23
    24a2:	ac a1       	ldd	r26, Y+36	; 0x24
    24a4:	bd a1       	ldd	r27, Y+37	; 0x25
    24a6:	2f a1       	ldd	r18, Y+39	; 0x27
    24a8:	38 a5       	ldd	r19, Y+40	; 0x28
    24aa:	49 a5       	ldd	r20, Y+41	; 0x29
    24ac:	5a a5       	ldd	r21, Y+42	; 0x2a
    24ae:	82 1b       	sub	r24, r18
    24b0:	93 0b       	sbc	r25, r19
    24b2:	a4 0b       	sbc	r26, r20
    24b4:	b5 0b       	sbc	r27, r21
    24b6:	8a a3       	std	Y+34, r24	; 0x22
    24b8:	9b a3       	std	Y+35, r25	; 0x23
    24ba:	ac a3       	std	Y+36, r26	; 0x24
    24bc:	bd a3       	std	Y+37, r27	; 0x25
    24be:	bc c0       	rjmp	.+376    	; 0x2638 <main+0x4f8>
                }
                else if (operatorPressed == '*') {
    24c0:	8e a1       	ldd	r24, Y+38	; 0x26
    24c2:	8a 32       	cpi	r24, 0x2A	; 42
    24c4:	99 f4       	brne	.+38     	; 0x24ec <main+0x3ac>
                    result *= currentNumber;
    24c6:	8a a1       	ldd	r24, Y+34	; 0x22
    24c8:	9b a1       	ldd	r25, Y+35	; 0x23
    24ca:	ac a1       	ldd	r26, Y+36	; 0x24
    24cc:	bd a1       	ldd	r27, Y+37	; 0x25
    24ce:	2f a1       	ldd	r18, Y+39	; 0x27
    24d0:	38 a5       	ldd	r19, Y+40	; 0x28
    24d2:	49 a5       	ldd	r20, Y+41	; 0x29
    24d4:	5a a5       	ldd	r21, Y+42	; 0x2a
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 31 13 	call	0x2662	; 0x2662 <__mulsi3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8a a3       	std	Y+34, r24	; 0x22
    24e4:	9b a3       	std	Y+35, r25	; 0x23
    24e6:	ac a3       	std	Y+36, r26	; 0x24
    24e8:	bd a3       	std	Y+37, r27	; 0x25
    24ea:	a6 c0       	rjmp	.+332    	; 0x2638 <main+0x4f8>
                }
                else if (operatorPressed == '/') {
    24ec:	8e a1       	ldd	r24, Y+38	; 0x26
    24ee:	8f 32       	cpi	r24, 0x2F	; 47
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <main+0x3b4>
    24f2:	a2 c0       	rjmp	.+324    	; 0x2638 <main+0x4f8>
                    if (currentNumber != 0) {
    24f4:	8f a1       	ldd	r24, Y+39	; 0x27
    24f6:	98 a5       	ldd	r25, Y+40	; 0x28
    24f8:	a9 a5       	ldd	r26, Y+41	; 0x29
    24fa:	ba a5       	ldd	r27, Y+42	; 0x2a
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	a1 05       	cpc	r26, r1
    2500:	b1 05       	cpc	r27, r1
    2502:	99 f0       	breq	.+38     	; 0x252a <main+0x3ea>
                        result /= currentNumber;
    2504:	8a a1       	ldd	r24, Y+34	; 0x22
    2506:	9b a1       	ldd	r25, Y+35	; 0x23
    2508:	ac a1       	ldd	r26, Y+36	; 0x24
    250a:	bd a1       	ldd	r27, Y+37	; 0x25
    250c:	2f a1       	ldd	r18, Y+39	; 0x27
    250e:	38 a5       	ldd	r19, Y+40	; 0x28
    2510:	49 a5       	ldd	r20, Y+41	; 0x29
    2512:	5a a5       	ldd	r21, Y+42	; 0x2a
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__divmodsi4>
    251c:	da 01       	movw	r26, r20
    251e:	c9 01       	movw	r24, r18
    2520:	8a a3       	std	Y+34, r24	; 0x22
    2522:	9b a3       	std	Y+35, r25	; 0x23
    2524:	ac a3       	std	Y+36, r26	; 0x24
    2526:	bd a3       	std	Y+37, r27	; 0x25
    2528:	87 c0       	rjmp	.+270    	; 0x2638 <main+0x4f8>
                    }
                    else {
                        HLCD_voidSendString("Error!");
    252a:	82 e6       	ldi	r24, 0x62	; 98
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <HLCD_voidSendString>
                        for (u16 i = 0; i < 2000; i++) {
    2532:	1e 8e       	std	Y+30, r1	; 0x1e
    2534:	1d 8e       	std	Y+29, r1	; 0x1d
    2536:	77 c0       	rjmp	.+238    	; 0x2626 <main+0x4e6>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a0 e8       	ldi	r26, 0x80	; 128
    253e:	bf e3       	ldi	r27, 0x3F	; 63
    2540:	8b 87       	std	Y+11, r24	; 0x0b
    2542:	9c 87       	std	Y+12, r25	; 0x0c
    2544:	ad 87       	std	Y+13, r26	; 0x0d
    2546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2548:	6b 85       	ldd	r22, Y+11	; 0x0b
    254a:	7c 85       	ldd	r23, Y+12	; 0x0c
    254c:	8d 85       	ldd	r24, Y+13	; 0x0d
    254e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	4a ef       	ldi	r20, 0xFA	; 250
    2556:	54 e4       	ldi	r21, 0x44	; 68
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	8f 83       	std	Y+7, r24	; 0x07
    2562:	98 87       	std	Y+8, r25	; 0x08
    2564:	a9 87       	std	Y+9, r26	; 0x09
    2566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	2c f4       	brge	.+10     	; 0x258a <main+0x44a>
		__ticks = 1;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <main+0x4c8>
	else if (__tmp > 65535)
    258a:	6f 81       	ldd	r22, Y+7	; 0x07
    258c:	78 85       	ldd	r23, Y+8	; 0x08
    258e:	89 85       	ldd	r24, Y+9	; 0x09
    2590:	9a 85       	ldd	r25, Y+10	; 0x0a
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	3f ef       	ldi	r19, 0xFF	; 255
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	57 e4       	ldi	r21, 0x47	; 71
    259a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	4c f5       	brge	.+82     	; 0x25f4 <main+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9e 83       	std	Y+6, r25	; 0x06
    25c8:	8d 83       	std	Y+5, r24	; 0x05
    25ca:	0f c0       	rjmp	.+30     	; 0x25ea <main+0x4aa>
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9c 83       	std	Y+4, r25	; 0x04
    25d2:	8b 83       	std	Y+3, r24	; 0x03
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	9c 81       	ldd	r25, Y+4	; 0x04
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <main+0x498>
    25dc:	9c 83       	std	Y+4, r25	; 0x04
    25de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9e 83       	std	Y+6, r25	; 0x06
    25e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ea:	8d 81       	ldd	r24, Y+5	; 0x05
    25ec:	9e 81       	ldd	r25, Y+6	; 0x06
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	69 f7       	brne	.-38     	; 0x25cc <main+0x48c>
    25f2:	14 c0       	rjmp	.+40     	; 0x261c <main+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9e 83       	std	Y+6, r25	; 0x06
    2606:	8d 83       	std	Y+5, r24	; 0x05
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	9a 83       	std	Y+2, r25	; 0x02
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <main+0x4d4>
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    261e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	9e 8f       	std	Y+30, r25	; 0x1e
    2624:	8d 8f       	std	Y+29, r24	; 0x1d
    2626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2628:	9e 8d       	ldd	r25, Y+30	; 0x1e
    262a:	27 e0       	ldi	r18, 0x07	; 7
    262c:	80 3d       	cpi	r24, 0xD0	; 208
    262e:	92 07       	cpc	r25, r18
    2630:	08 f4       	brcc	.+2      	; 0x2634 <main+0x4f4>
    2632:	82 cf       	rjmp	.-252    	; 0x2538 <main+0x3f8>
                            _delay_ms(1);  // Wait for 2 seconds
                        }
                        HLCD_voidClear();  // Clear the display after showing error
    2634:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <HLCD_voidClear>
                    }
                }
                HLCD_voidDisplayChar('=');
    2638:	8d e3       	ldi	r24, 0x3D	; 61
    263a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <HLCD_voidDisplayChar>
                HLCD_voidDisplyNumber(result);
    263e:	8a a1       	ldd	r24, Y+34	; 0x22
    2640:	9b a1       	ldd	r25, Y+35	; 0x23
    2642:	ac a1       	ldd	r26, Y+36	; 0x24
    2644:	bd a1       	ldd	r27, Y+37	; 0x25
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <HLCD_voidDisplyNumber>
                currentNumber = result;  // Store the result as the new input
    264e:	8a a1       	ldd	r24, Y+34	; 0x22
    2650:	9b a1       	ldd	r25, Y+35	; 0x23
    2652:	ac a1       	ldd	r26, Y+36	; 0x24
    2654:	bd a1       	ldd	r27, Y+37	; 0x25
    2656:	8f a3       	std	Y+39, r24	; 0x27
    2658:	98 a7       	std	Y+40, r25	; 0x28
    265a:	a9 a7       	std	Y+41, r26	; 0x29
    265c:	ba a7       	std	Y+42, r27	; 0x2a
                operatorPressed = '\0';  // Clear the operator
    265e:	1e a2       	std	Y+38, r1	; 0x26
    2660:	8f cd       	rjmp	.-1250   	; 0x2180 <main+0x40>

00002662 <__mulsi3>:
    2662:	62 9f       	mul	r22, r18
    2664:	d0 01       	movw	r26, r0
    2666:	73 9f       	mul	r23, r19
    2668:	f0 01       	movw	r30, r0
    266a:	82 9f       	mul	r24, r18
    266c:	e0 0d       	add	r30, r0
    266e:	f1 1d       	adc	r31, r1
    2670:	64 9f       	mul	r22, r20
    2672:	e0 0d       	add	r30, r0
    2674:	f1 1d       	adc	r31, r1
    2676:	92 9f       	mul	r25, r18
    2678:	f0 0d       	add	r31, r0
    267a:	83 9f       	mul	r24, r19
    267c:	f0 0d       	add	r31, r0
    267e:	74 9f       	mul	r23, r20
    2680:	f0 0d       	add	r31, r0
    2682:	65 9f       	mul	r22, r21
    2684:	f0 0d       	add	r31, r0
    2686:	99 27       	eor	r25, r25
    2688:	72 9f       	mul	r23, r18
    268a:	b0 0d       	add	r27, r0
    268c:	e1 1d       	adc	r30, r1
    268e:	f9 1f       	adc	r31, r25
    2690:	63 9f       	mul	r22, r19
    2692:	b0 0d       	add	r27, r0
    2694:	e1 1d       	adc	r30, r1
    2696:	f9 1f       	adc	r31, r25
    2698:	bd 01       	movw	r22, r26
    269a:	cf 01       	movw	r24, r30
    269c:	11 24       	eor	r1, r1
    269e:	08 95       	ret

000026a0 <__udivmodsi4>:
    26a0:	a1 e2       	ldi	r26, 0x21	; 33
    26a2:	1a 2e       	mov	r1, r26
    26a4:	aa 1b       	sub	r26, r26
    26a6:	bb 1b       	sub	r27, r27
    26a8:	fd 01       	movw	r30, r26
    26aa:	0d c0       	rjmp	.+26     	; 0x26c6 <__udivmodsi4_ep>

000026ac <__udivmodsi4_loop>:
    26ac:	aa 1f       	adc	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	ee 1f       	adc	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	a2 17       	cp	r26, r18
    26b6:	b3 07       	cpc	r27, r19
    26b8:	e4 07       	cpc	r30, r20
    26ba:	f5 07       	cpc	r31, r21
    26bc:	20 f0       	brcs	.+8      	; 0x26c6 <__udivmodsi4_ep>
    26be:	a2 1b       	sub	r26, r18
    26c0:	b3 0b       	sbc	r27, r19
    26c2:	e4 0b       	sbc	r30, r20
    26c4:	f5 0b       	sbc	r31, r21

000026c6 <__udivmodsi4_ep>:
    26c6:	66 1f       	adc	r22, r22
    26c8:	77 1f       	adc	r23, r23
    26ca:	88 1f       	adc	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	1a 94       	dec	r1
    26d0:	69 f7       	brne	.-38     	; 0x26ac <__udivmodsi4_loop>
    26d2:	60 95       	com	r22
    26d4:	70 95       	com	r23
    26d6:	80 95       	com	r24
    26d8:	90 95       	com	r25
    26da:	9b 01       	movw	r18, r22
    26dc:	ac 01       	movw	r20, r24
    26de:	bd 01       	movw	r22, r26
    26e0:	cf 01       	movw	r24, r30
    26e2:	08 95       	ret

000026e4 <__divmodsi4>:
    26e4:	97 fb       	bst	r25, 7
    26e6:	09 2e       	mov	r0, r25
    26e8:	05 26       	eor	r0, r21
    26ea:	0e d0       	rcall	.+28     	; 0x2708 <__divmodsi4_neg1>
    26ec:	57 fd       	sbrc	r21, 7
    26ee:	04 d0       	rcall	.+8      	; 0x26f8 <__divmodsi4_neg2>
    26f0:	d7 df       	rcall	.-82     	; 0x26a0 <__udivmodsi4>
    26f2:	0a d0       	rcall	.+20     	; 0x2708 <__divmodsi4_neg1>
    26f4:	00 1c       	adc	r0, r0
    26f6:	38 f4       	brcc	.+14     	; 0x2706 <__divmodsi4_exit>

000026f8 <__divmodsi4_neg2>:
    26f8:	50 95       	com	r21
    26fa:	40 95       	com	r20
    26fc:	30 95       	com	r19
    26fe:	21 95       	neg	r18
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	4f 4f       	sbci	r20, 0xFF	; 255
    2704:	5f 4f       	sbci	r21, 0xFF	; 255

00002706 <__divmodsi4_exit>:
    2706:	08 95       	ret

00002708 <__divmodsi4_neg1>:
    2708:	f6 f7       	brtc	.-4      	; 0x2706 <__divmodsi4_exit>
    270a:	90 95       	com	r25
    270c:	80 95       	com	r24
    270e:	70 95       	com	r23
    2710:	61 95       	neg	r22
    2712:	7f 4f       	sbci	r23, 0xFF	; 255
    2714:	8f 4f       	sbci	r24, 0xFF	; 255
    2716:	9f 4f       	sbci	r25, 0xFF	; 255
    2718:	08 95       	ret

0000271a <__prologue_saves__>:
    271a:	2f 92       	push	r2
    271c:	3f 92       	push	r3
    271e:	4f 92       	push	r4
    2720:	5f 92       	push	r5
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	ca 1b       	sub	r28, r26
    2744:	db 0b       	sbc	r29, r27
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	09 94       	ijmp

00002752 <__epilogue_restores__>:
    2752:	2a 88       	ldd	r2, Y+18	; 0x12
    2754:	39 88       	ldd	r3, Y+17	; 0x11
    2756:	48 88       	ldd	r4, Y+16	; 0x10
    2758:	5f 84       	ldd	r5, Y+15	; 0x0f
    275a:	6e 84       	ldd	r6, Y+14	; 0x0e
    275c:	7d 84       	ldd	r7, Y+13	; 0x0d
    275e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2760:	9b 84       	ldd	r9, Y+11	; 0x0b
    2762:	aa 84       	ldd	r10, Y+10	; 0x0a
    2764:	b9 84       	ldd	r11, Y+9	; 0x09
    2766:	c8 84       	ldd	r12, Y+8	; 0x08
    2768:	df 80       	ldd	r13, Y+7	; 0x07
    276a:	ee 80       	ldd	r14, Y+6	; 0x06
    276c:	fd 80       	ldd	r15, Y+5	; 0x05
    276e:	0c 81       	ldd	r16, Y+4	; 0x04
    2770:	1b 81       	ldd	r17, Y+3	; 0x03
    2772:	aa 81       	ldd	r26, Y+2	; 0x02
    2774:	b9 81       	ldd	r27, Y+1	; 0x01
    2776:	ce 0f       	add	r28, r30
    2778:	d1 1d       	adc	r29, r1
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	ed 01       	movw	r28, r26
    2786:	08 95       	ret

00002788 <_exit>:
    2788:	f8 94       	cli

0000278a <__stop_program>:
    278a:	ff cf       	rjmp	.-2      	; 0x278a <__stop_program>
